import { 
  Connection, 
  Keypair, 
  LAMPORTS_PER_SOL, 
  PublicKey, 
  SystemProgram, 
  Transaction,
  sendAndConfirmTransaction,
  TransactionInstruction
} from '@solana/web3.js';
import * as fs from 'fs';
import * as path from 'path';
import csvParser from 'csv-parser';
import { WalletData } from './WalletService';
import { LookupTableService } from './LookupTableService';
import { WalletSetService } from './WalletSetService';
import { WalletService } from './WalletService';

interface CsvWalletData {
  NUMBER: string;
  TYPE: string;
  PUBLIC_KEY: string;
  PRIVATE_KEY: string;
}

export interface DistributionState {
  lastProcessedWallet: number;
  remainingAmount: number;
  baseAmount: number;
  failedAttempts: number;
  userId?: string;
  timestamp?: number;
}

export interface IDistributionStateRepository {
  saveState(state: DistributionState): Promise<void>;
  getState(userId: string): Promise<DistributionState | null>;
  deleteState(userId: string): Promise<void>;
}

export class TransactionService {
  private rpcUrls: string[];
  private currentRpcIndex: number;
  private connection: Connection;
  private walletService: WalletService;
  private walletSetService: WalletSetService;
  private lookupTableService: LookupTableService;
  private bundleLUT: string | null = null;
  private marketMakingLUT: string | null = null;
  private distributionState: DistributionState | null = null;
  private stateRepository: IDistributionStateRepository;
  
  constructor(
    walletService: WalletService,
    stateRepository: IDistributionStateRepository,
    rpcUrl: string = 'https://api.mainnet-beta.solana.com'
  ) {
    this.stateRepository = stateRepository;
    // List of RPC endpoints to use (add your actual endpoints here)
    this.rpcUrls = [
      rpcUrl,
      'https://mainnet.helius-rpc.com/?api-key=3a000b3a-3d3b-4e41-9b30-c75d439068f1',
      'https://solana-mainnet.g.alchemy.com/v2/demo',  // Replace with actual API key
      'https://api.mainnet-beta.solana.com'
    ];
    this.currentRpcIndex = 0;
    this.connection = new Connection(this.rpcUrls[this.currentRpcIndex]);
    this.walletService = walletService;
    this.walletSetService = new WalletSetService();
    this.lookupTableService = new LookupTableService(this.rpcUrls[this.currentRpcIndex]);
  }

  private switchToNextRPC(): void {
    const oldRpc = this.rpcUrls[this.currentRpcIndex];
    this.currentRpcIndex = (this.currentRpcIndex + 1) % this.rpcUrls.length;
    const newRpc = this.rpcUrls[this.currentRpcIndex];
    
    console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ RPC:`);
    console.log(`   ‚ùå –°—Ç–∞—Ä—ã–π: ${oldRpc}`);
    console.log(`   ‚úÖ –ù–æ–≤—ã–π: ${newRpc}`);
    
    this.connection = new Connection(newRpc);
    this.lookupTableService = new LookupTableService(newRpc);
  }

  public setLookupTableAddresses(bundleLUT: string, marketMakingLUT: string) {
    this.bundleLUT = bundleLUT;
    this.marketMakingLUT = marketMakingLUT;
  }

  public async getBundlePayerBalance(): Promise<number> {
    try {
      const bundlePayer = this.walletService.getWalletByIndex(24);
      if (!bundlePayer) {
        throw new Error('Bundle payer wallet (#24) not found');
      }
      const balance = await this.connection.getBalance(bundlePayer.publicKey);
      return balance / LAMPORTS_PER_SOL;
    } catch (error) {
      console.error('Error getting bundle payer wallet balance:', error);
      throw error;
    }
  }

  public async getMarketMakingPayerBalance(): Promise<number> {
    try {
      const marketMakingPayer = this.walletService.getWalletByIndex(25);
      if (!marketMakingPayer) {
        throw new Error('Market making payer wallet (#25) not found');
      }
      const balance = await this.connection.getBalance(marketMakingPayer.publicKey);
      return balance / LAMPORTS_PER_SOL;
    } catch (error) {
      console.error('Error getting market making payer wallet balance:', error);
      throw error;
    }
  }

  public async getWalletBalance(index: number): Promise<number> {
    try {
      const wallet = this.walletService.getWalletByIndex(index);
      if (!wallet) {
        throw new Error(`Wallet #${index} not found`);
      }
      const balance = await this.connection.getBalance(wallet.publicKey);
      return balance / LAMPORTS_PER_SOL;
    } catch (error) {
      console.error(`Error getting wallet #${index} balance:`, error);
      throw error;
    }
  }

  public async loadWalletsFromSet(): Promise<void> {
    // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∏–ª–∏ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–µ—Ç–∞
    await this.walletService.reloadWallets();
  }

  private getRandomizedAmount(baseAmount: number): number {
    // Generate random variation between -20% and +20%
    const variation = 0.2; // 20%
    const randomFactor = 1 + (Math.random() * variation * 2 - variation);
    return Math.floor(baseAmount * randomFactor);
  }

  public async distributeToBundle(
    amount: number,
    progressCallback?: (text: string) => Promise<void>
  ): Promise<string[]> {
    try {
      const signatures: string[] = [];
      const bundlePayer = this.walletService.getWalletByIndex(24);
      
      if (!bundlePayer) {
        throw new Error('Bundle payer wallet (#24) not found');
      }

      const totalAmount = amount * LAMPORTS_PER_SOL;
      const baseAmountPerWallet = Math.floor(totalAmount / 23);

      // Calculate total remaining amount to distribute
      let remainingAmount = totalAmount;
      const walletAmounts: { [key: number]: number } = {};

      // First pass: assign randomized amounts to all wallets except the last one
      for (let i = 1; i < 23; i++) {
        const randomizedAmount = this.getRandomizedAmount(baseAmountPerWallet);
        walletAmounts[i] = randomizedAmount;
        remainingAmount -= randomizedAmount;
      }
      // Last wallet gets the remaining amount to ensure total is correct
      walletAmounts[23] = remainingAmount;

      // Process in batches of 5 transactions
      const BATCH_SIZE = 5;
      for (let i = 1; i <= 23; i += BATCH_SIZE) {
        const batchPromises = [];
        const endIndex = Math.min(i + BATCH_SIZE - 1, 23);

        for (let j = i; j <= endIndex; j++) {
          const targetWallet = this.walletService.getWalletByIndex(j);
          if (!targetWallet) {
            throw new Error(`Target wallet #${j} not found`);
          }

          const actualAmount = walletAmounts[j];
          if (progressCallback) {
            await progressCallback(`–û—Ç–ø—Ä–∞–≤–∫–∞ ${actualAmount / LAMPORTS_PER_SOL} SOL –Ω–∞ –∫–æ—à–µ–ª–µ–∫ #${j}...`);
          }

          const sendTransaction = async () => {
            const transaction = new Transaction().add(
              SystemProgram.transfer({
                fromPubkey: bundlePayer.publicKey,
                toPubkey: targetWallet.publicKey,
                lamports: actualAmount
              })
            );

            return this.retryWithBackoff(async () => {
              try {
                const { blockhash, lastValidBlockHeight } = await this.connection.getLatestBlockhash();
                transaction.recentBlockhash = blockhash;
                transaction.lastValidBlockHeight = lastValidBlockHeight;

                const confirmOptions = {
                  skipPreflight: false,
                  commitment: 'confirmed' as const,
                  preflightCommitment: 'confirmed' as const,
                  maxRetries: 5
                };

                return await sendAndConfirmTransaction(
                  this.connection,
                  transaction,
                  [bundlePayer],
                  confirmOptions
                );
              } catch (error) {
                if (error instanceof Error) {
                  if (error.message.includes('429 Too Many Requests')) {
                    throw error;
                  } else if (error.message.includes('insufficient funds')) {
                    throw new Error(`Insufficient funds in wallet #24 for distribution to wallet #${j}`);
                  } else if (error.message.includes('blockhash not found')) {
                    this.switchToNextRPC();
                    throw error;
                  }
                }
                throw error;
              }
            }, 5);
          };

          batchPromises.push(sendTransaction());
        }

        try {
          const batchSignatures = await Promise.all(batchPromises);
          signatures.push(...batchSignatures);

          if (i + BATCH_SIZE <= 23) {
            await this.sleep(500);
          }
        } catch (error) {
          console.error(`Error processing batch ${i}-${endIndex}:`, error);
          throw error;
        }
      }

      return signatures;
    } catch (error) {
      console.error('Error in distributeToBundle:', error);
      throw error;
    }
  }

  private async sleep(ms: number): Promise<void> {
    return new Promise(resolve => setTimeout(resolve, ms));
  }

  private async sendTransaction(
    fromWallet: Keypair,
    toPublicKey: PublicKey,
    amount: number
  ): Promise<string> {
    console.log(`üîÑ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${amount} SOL —Å ${fromWallet.publicKey.toString().slice(0, 8)}... –Ω–∞ ${toPublicKey.toString().slice(0, 8)}...`);
    
    const transaction = new Transaction().add(
      SystemProgram.transfer({
        fromPubkey: fromWallet.publicKey,
        toPubkey: toPublicKey,
        lamports: Math.floor(amount * LAMPORTS_PER_SOL)
      })
    );

    const { blockhash, lastValidBlockHeight } = await this.connection.getLatestBlockhash();
    transaction.recentBlockhash = blockhash;
    transaction.lastValidBlockHeight = lastValidBlockHeight;

    const confirmOptions = {
      skipPreflight: false,
      commitment: 'confirmed' as const,
      preflightCommitment: 'confirmed' as const,
      maxRetries: 5
    };

    console.log(`üì° –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —á–µ—Ä–µ–∑ RPC: ${this.rpcUrls[this.currentRpcIndex]}`);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
    const timeoutPromise = new Promise<never>((_, reject) => {
      setTimeout(() => reject(new Error('Transaction timeout after 3 seconds')), 3000);
    });

    try {
      // –ò—Å–ø–æ–ª—å–∑—É–µ–º Promise.race –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏ –æ–∂–∏–¥–∞–Ω–∏—è
      const signature = await Promise.race([
        sendAndConfirmTransaction(
          this.connection,
          transaction,
          [fromWallet],
          confirmOptions
        ),
        timeoutPromise
      ]) as string;
      
      console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: ${signature.slice(0, 12)}...`);
      return signature;
    } catch (error) {
      if (error instanceof Error && error.message.includes('timeout')) {
        console.log(`‚è±Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è (3 —Å–µ–∫). –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –¥—Ä—É–≥–æ–π RPC...`);
        this.switchToNextRPC();
        throw error;
      }
      throw error;
    }
  }

  private async retryWithBackoff<T>(
    operation: () => Promise<T>,
    maxRetries: number = 5
  ): Promise<T> {
    let lastError: Error | unknown;
    let attemptCount = 0;

    for (let i = 0; i < maxRetries; i++) {
      attemptCount++;
      console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ #${attemptCount} –∏–∑ ${maxRetries}...`);
      
      try {
        const result = await operation();
        console.log(`‚úÖ –û–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —Å ${attemptCount} –ø–æ–ø—ã—Ç–∫–∏`);
        return result;
      } catch (error: unknown) {
        lastError = error;
        if (error instanceof Error) {
          // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
          console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏ (–ø–æ–ø—ã—Ç–∫–∞ ${attemptCount}): ${error.message}`);
          
          // –ü—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ RPC –∏–ª–∏ —Ç–∞–π–º–∞—É—Ç–µ —Å—Ä–∞–∑—É –ø–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è
          if (error.message.includes('429 Too Many Requests') || 
              error.message.includes('blockhash not found') ||
              error.message.includes('failed to get recent blockhash') ||
              error.message.includes('failed to send transaction') ||
              error.message.includes('timeout')) {
            console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π RPC –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏: ${error.message.slice(0, 50)}...`);
            this.switchToNextRPC();
            continue; // –°—Ä–∞–∑—É –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π RPC –±–µ–∑ –∑–∞–¥–µ—Ä–∂–∫–∏
          }
          
          if (error.message.includes('insufficient funds') || 
              error.message.includes('insufficient funds for rent')) {
            console.error(`üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –ø–æ–ø—ã—Ç–∫–∏`);
            throw error; // –ù–µ —Ä–µ—Ç—Ä–∞–∏–º –æ—à–∏–±–∫–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º
          }

          // –î–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –¥–µ–ª–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –ø–∞—É–∑—É
          console.log(`‚è±Ô∏è –ü–∞—É–∑–∞ 100–º—Å –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø–æ–ø—ã—Ç–∫–æ–π...`);
          await this.sleep(100);
          continue;
        }
        throw error;
      }
    }
    console.error(`‚ùå –í—Å–µ ${maxRetries} –ø–æ–ø—ã—Ç–æ–∫ –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å –Ω–µ—É–¥–∞—á–Ω–æ`);
    throw lastError;
  }

  private async distributeToMarketMakersBatch(
    startIndex: number,
    endIndex: number,
    walletAmounts: { [key: number]: number },
    marketMakingPayer: Keypair,
    progressCallback?: (text: string) => Promise<void>
  ): Promise<string[]> {
    const signatures: string[] = [];
    const BATCH_SIZE = 5;

    console.log(`–ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤ ${startIndex}-${endIndex}`);
    console.log(`–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ #25 –ø–µ—Ä–µ–¥ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º: ${await this.connection.getBalance(marketMakingPayer.publicKey) / LAMPORTS_PER_SOL} SOL`);

    for (let i = startIndex; i <= endIndex; i += BATCH_SIZE) {
      const batchPromises = [];
      const currentEndIndex = Math.min(i + BATCH_SIZE - 1, endIndex);
      
      console.log(`\n–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ ${i}-${currentEndIndex}:`);

      for (let j = i; j <= currentEndIndex; j++) {
        const targetWallet = this.walletService.getWalletByIndex(j);
        if (!targetWallet) {
          throw new Error(`Target wallet #${j} not found`);
        }

        const actualAmount = walletAmounts[j];
        console.log(`–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: ${actualAmount / LAMPORTS_PER_SOL} SOL –Ω–∞ –∫–æ—à–µ–ª–µ–∫ #${j}`);
        
        if (progressCallback) {
          await progressCallback(`–û—Ç–ø—Ä–∞–≤–∫–∞ ${actualAmount / LAMPORTS_PER_SOL} SOL –Ω–∞ –∫–æ—à–µ–ª–µ–∫ #${j}...`);
        }

        const sendTransaction = async () => {
          console.log(`–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ #${j}`);
          const transaction = new Transaction().add(
            SystemProgram.transfer({
              fromPubkey: marketMakingPayer.publicKey,
              toPubkey: targetWallet.publicKey,
              lamports: actualAmount
            })
          );

          return this.retryWithBackoff(async () => {
            try {
              const { blockhash, lastValidBlockHeight } = await this.connection.getLatestBlockhash();
              transaction.recentBlockhash = blockhash;
              transaction.lastValidBlockHeight = lastValidBlockHeight;

              const confirmOptions = {
                skipPreflight: false,
                commitment: 'confirmed' as const,
                preflightCommitment: 'confirmed' as const,
                maxRetries: 5
              };

              const signature = await sendAndConfirmTransaction(
                this.connection,
                transaction,
                [marketMakingPayer],
                confirmOptions
              );
              console.log(`‚úÖ –£—Å–ø–µ—à–Ω–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞ –∫–æ—à–µ–ª–µ–∫ #${j}: ${signature}`);
              return signature;
            } catch (error) {
              if (error instanceof Error) {
                console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞ –∫–æ—à–µ–ª–µ–∫ #${j}:`, error.message);
                if (error.message.includes('429 Too Many Requests')) {
                  await this.sleep(1000);
                  this.switchToNextRPC();
                  throw error;
                } else if (error.message.includes('insufficient funds')) {
                  throw new Error(`Insufficient funds in wallet #25 for distribution to wallet #${j}`);
                } else if (error.message.includes('blockhash not found')) {
                  this.switchToNextRPC();
                  throw error;
                }
              }
              throw error;
            }
          });
        };

        await this.sleep(500);
        console.log(`–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –∫–æ—à–µ–ª—å–∫–∞ #${j} –≤ –ø–∞–∫–µ—Ç`);
        batchPromises.push(sendTransaction());
      }

      try {
        console.log(`\n–û–∂–∏–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –ø–∞–∫–µ—Ç–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π ${i}-${currentEndIndex}...`);
        const batchSignatures = await Promise.all(batchPromises);
        signatures.push(...batchSignatures);
        console.log(`‚úÖ –ü–∞–∫–µ—Ç ${i}-${currentEndIndex} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω`);

        if (i + BATCH_SIZE <= endIndex) {
          if (progressCallback) {
            await progressCallback('–î–µ–ª–∞–µ–º –ø–∞—É–∑—É –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏...');
          }
          console.log(`–ü–∞—É–∑–∞ 3 —Å–µ–∫—É–Ω–¥—ã –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞–∫–µ—Ç–æ–º`);
          await this.sleep(1000);
        }
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–∞–∫–µ—Ç–∞ ${i}-${currentEndIndex}:`, error);
        throw error;
      }
    }

    console.log(`\n–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–ª—è –∫–æ—à–µ–ª—å–∫–æ–≤ ${startIndex}-${endIndex} –∑–∞–≤–µ—Ä—à–µ–Ω–æ`);
    console.log(`–ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ #25 –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è: ${await this.connection.getBalance(marketMakingPayer.publicKey) / LAMPORTS_PER_SOL} SOL`);
    return signatures;
  }

  public async distributeToMarketMakers(
    amount: number,
    userId: string,
    useLookupTable: boolean = false,
    progressCallback?: (text: string) => Promise<void>
  ): Promise<string[]> {
    console.log(`\nüöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ${amount} SOL –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await this.loadDistributionState(userId);
    if (this.distributionState) {
      console.log(`üìã –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: –ø–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ—à–µ–ª–µ–∫ #${this.distributionState.lastProcessedWallet}, –æ—Å—Ç–∞–ª–æ—Å—å ${this.distributionState.remainingAmount} SOL`);
    } else {
      console.log(`üìã –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Å –Ω–∞—á–∞–ª–∞`);
    }

    const signatures: string[] = [];
    const marketMakingPayer = await this.walletService.getWallet(25);
    if (!marketMakingPayer) {
      throw new Error('Market making payer wallet not found');
    }

    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ #25: ${await this.connection.getBalance(marketMakingPayer.publicKey) / LAMPORTS_PER_SOL} SOL`);

    // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
    if (this.distributionState) {
      await progressCallback?.(`üìù –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å –∫–æ—à–µ–ª—å–∫–∞ #${this.distributionState.lastProcessedWallet}`);
    } else {
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      const baseAmount = amount / 75; // 75 –∫–æ—à–µ–ª—å–∫–æ–≤ (26-100)
      this.distributionState = {
        lastProcessedWallet: 25, // –ù–∞—á–∏–Ω–∞–µ–º —Å 26
        remainingAmount: amount,
        baseAmount,
        failedAttempts: 0
      };
      console.log(`üíµ –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞ –Ω–∞ –∫–æ—à–µ–ª–µ–∫: ${baseAmount.toFixed(6)} SOL`);
    }

    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (!this.distributionState) {
        throw new Error('Distribution state not initialized');
      }

      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –ø–∞–∫–µ—Ç–∞–º–∏ –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
      const BATCH_SIZE = 5; // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–æ 5 –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      console.log(`üì¶ –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: ${BATCH_SIZE} –∫–æ—à–µ–ª—å–∫–æ–≤`);
      
      for (let batchStart = this.distributionState.lastProcessedWallet + 1; batchStart <= 100; batchStart += BATCH_SIZE) {
        const batchEnd = Math.min(batchStart + BATCH_SIZE - 1, 100);
        console.log(`\nüì¶ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ #${batchStart}-${batchEnd}`);
        
        // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –º–∞—Å—Å–∏–≤ –ø—Ä–æ–º–∏—Å–æ–≤ –¥–ª—è –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏
        const batchPromises = [];
        const batchWallets = [];
        
        // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ—à–µ–ª—å–∫–∞—Ö –¥–ª—è —ç—Ç–æ–≥–æ –ø–∞–∫–µ—Ç–∞
        for (let i = batchStart; i <= batchEnd; i++) {
          const targetWallet = await this.walletService.getWallet(i);
          if (!targetWallet) {
            console.log(`‚ö†Ô∏è –ö–æ—à–µ–ª–µ–∫ #${i} –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
            continue;
          }
          
          batchWallets.push({
            index: i,
            wallet: targetWallet
          });
        }
        
        console.log(`üëõ –ù–∞–π–¥–µ–Ω–æ ${batchWallets.length} –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ —Ç–µ–∫—É—â–µ–º –ø–∞–∫–µ—Ç–µ`);
        
        // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º –ø–∞–∫–µ—Ç–µ
        const totalWallets = 75; // –í—Å–µ–≥–æ –∫–æ—à–µ–ª—å–∫–æ–≤ (26-100)
        const processedWallets = batchStart - 26; // –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤ –¥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞–∫–µ—Ç–∞
        const progressPercent = Math.floor((processedWallets / totalWallets) * 100);
        
        await progressCallback?.(`üìù –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–∫–µ—Ç–∞ –∫–æ—à–µ–ª—å–∫–æ–≤ #${batchStart}-${batchEnd} | –ü—Ä–æ–≥—Ä–µ—Å—Å: ${progressPercent}%`);
        
        // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–º–∏—Å—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤ –ø–∞–∫–µ—Ç–µ
        for (const { index, wallet } of batchWallets) {
          const processWallet = async () => {
            try {
              // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∫–∞–∂–¥–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–µ–π
              if (!this.distributionState) {
                throw new Error('Distribution state lost during execution');
              }
              
              // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
              const amountStr = this.distributionState?.baseAmount.toFixed(4) || '0';
              console.log(`üí∏ –û—Ç–ø—Ä–∞–≤–∫–∞ ${amountStr} SOL –Ω–∞ –∫–æ—à–µ–ª–µ–∫ #${index}...`);
              await progressCallback?.(`üìù –û—Ç–ø—Ä–∞–≤–∫–∞ ${amountStr} SOL –Ω–∞ –∫–æ—à–µ–ª–µ–∫ #${index}...`);
              
              const signature = await this.retryWithBackoff(async () => {
                if (!this.distributionState) {
                  throw new Error('Distribution state lost during execution');
                }
                return await this.sendTransaction(
                  marketMakingPayer,
                  wallet.publicKey,
                  this.distributionState.baseAmount
                );
              }, 3);
              
              console.log(`‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${amountStr} SOL –Ω–∞ –∫–æ—à–µ–ª–µ–∫ #${index}`);
              return { index, signature, success: true };
            } catch (error) {
              console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ—à–µ–ª—å–∫–∞ #${index}:`, error);
              return { index, error, success: false };
            }
          };
          
          batchPromises.push(processWallet());
        }
        
        // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ø–∞–∫–µ—Ç–µ
        console.log(`‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π –≤ –ø–∞–∫–µ—Ç–µ...`);
        const results = await Promise.all(batchPromises);
        
        // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        let successCount = 0;
        let failCount = 0;
        
        for (const result of results) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º
          if (!this.distributionState) {
            throw new Error('Distribution state lost during execution');
          }
          
          if (result.success) {
            successCount++;
            if (result.signature) {
              signatures.push(result.signature);
            }
            this.distributionState.remainingAmount -= this.distributionState.baseAmount;
            this.distributionState.lastProcessedWallet = result.index;
            this.distributionState.failedAttempts = 0;
          } else if (result.error instanceof Error && result.error.message.includes('TimeoutError')) {
            failCount++;
            this.distributionState.failedAttempts++;
            throw new Error(`TimeoutError at wallet #${result.index}`);
          } else {
            failCount++;
            await progressCallback?.(`‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ—à–µ–ª—å–∫–∞ #${result.index}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...`);
          }
        }
        
        console.log(`üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–∞–∫–µ—Ç–∞: —É—Å–ø–µ—à–Ω–æ ${successCount}, –æ—à–∏–±–æ–∫ ${failCount}`);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∫–∞–∂–¥–æ–≥–æ –ø–∞–∫–µ—Ç–∞
        console.log(`üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è...`);
        await this.saveDistributionState(userId);
        
        // –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –ø–∞–∫–µ—Ç–∞–º–∏
        console.log(`‚è±Ô∏è –ü–∞—É–∑–∞ 1 —Å–µ–∫—É–Ω–¥–∞ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∞–∫–µ—Ç–æ–º...`);
        await this.sleep(1000);
      }

      // –£—Å–ø–µ—à–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ - –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
      console.log(`üéâ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ ${signatures.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π`);
      await this.clearDistributionState(userId);
      return signatures;

    } catch (error) {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏:`, error);
      await this.saveDistributionState(userId);
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
      if (this.distributionState && error instanceof Error && error.message.includes('TimeoutError')) {
        const message = `‚ö†Ô∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞ –∫–æ—à–µ–ª—å–∫–µ #${this.distributionState.lastProcessedWallet + 1}\n\n` +
          `üí∞ –û—Å—Ç–∞–ª–æ—Å—å —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å: ${this.distributionState.remainingAmount.toFixed(4)} SOL\n` +
          `üìù –ù–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å" –¥–ª—è –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å –∫–æ—à–µ–ª—å–∫–∞ #${this.distributionState.lastProcessedWallet + 1}`;
        
        console.log(message);
        await progressCallback?.(message);
      }
      throw error;
    }
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  hasUnfinishedDistribution(): boolean {
    return this.distributionState !== null;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏
  getDistributionState(): DistributionState | null {
    return this.distributionState;
  }

  // –ú–µ—Ç–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
  resetDistributionState(): void {
    this.distributionState = null;
  }

  // Create Lookup Tables for bundle and market making wallets
  async createLookupTables(): Promise<{ bundleLUT: string | null, marketMakingLUT: string | null }> {
    const devWallet = this.walletService.getWalletByIndex(0);
    if (!devWallet) {
      throw new Error('Dev wallet (index 0) not found');
    }

    // Convert dev wallet to WalletData
    const devWalletData: WalletData = {
      publicKey: devWallet.publicKey.toString(),
      privateKey: Buffer.from(devWallet.secretKey).toString('base64'),
      index: 0,
      type: 'dev'
    };

    const wallets = this.walletService.getAllWallets();
    
    // Convert bundle wallets to WalletData
    const bundleWallets: WalletData[] = Array.from(wallets.entries())
      .filter(([index]) => index >= 1 && index <= 24)
      .map(([index, keypair]) => ({
        publicKey: keypair.publicKey.toString(),
        privateKey: Buffer.from(keypair.secretKey).toString('base64'),
        index,
        type: index === 24 ? 'bundle_payer' : 'bundle'
      }));

    // Convert market making wallets to WalletData
    const marketMakingWallets: WalletData[] = Array.from(wallets.entries())
      .filter(([index]) => index >= 25 && index <= 100)
      .map(([index, keypair]) => ({
        publicKey: keypair.publicKey.toString(),
        privateKey: Buffer.from(keypair.secretKey).toString('base64'),
        index,
        type: index === 25 ? 'market_maker_payer' : 'market_maker'
      }));

    if (bundleWallets.length !== 24) {
      throw new Error(`Expected 24 bundle wallets (including payer), found ${bundleWallets.length}`);
    }

    if (marketMakingWallets.length !== 76) {
      throw new Error(`Expected 76 market making wallets (including payer), found ${marketMakingWallets.length}`);
    }

    try {
      // Create Lookup Tables
      console.log('Creating bundle lookup table...');
      const bundleAddresses = bundleWallets.map(w => new PublicKey(w.publicKey));
      this.bundleLUT = await this.lookupTableService.createLookupTable(
        this.walletService.getDevWallet()!,
        bundleAddresses,
        'bundle'
      );

      console.log('Creating market making lookup table...');
      const marketMakingAddresses = marketMakingWallets.map(w => new PublicKey(w.publicKey));
      this.marketMakingLUT = await this.lookupTableService.createLookupTable(
        this.walletService.getDevWallet()!,
        marketMakingAddresses,
        'market_making'
      );

      return {
        bundleLUT: this.bundleLUT,
        marketMakingLUT: this.marketMakingLUT
      };
    } catch (error) {
      console.error('Error creating lookup tables:', error);
      throw error;
    }
  }

  // Get lookup table addresses
  getLookupTableAddresses(): { bundleLUT: string | null, marketMakingLUT: string | null } {
    console.log('Getting LUT addresses:', {
      bundleLUT: this.bundleLUT,
      marketMakingLUT: this.marketMakingLUT
    });
    return {
      bundleLUT: this.bundleLUT,
      marketMakingLUT: this.marketMakingLUT
    };
  }

  // Get addresses in a lookup table
  async getAddressesInLookupTable(lookupTableAddress: string): Promise<string[]> {
    try {
      console.log('Getting addresses for LUT:', lookupTableAddress);
      const addresses = await this.lookupTableService.getLookupTableAddresses(lookupTableAddress);
      console.log(`Found ${addresses.length} addresses in LUT`);
      return addresses;
    } catch (error) {
      console.error('Error getting addresses from LUT:', error);
      throw error;
    }
  }

  private async saveDistributionState(userId: string): Promise<void> {
    if (this.distributionState) {
      this.distributionState.userId = userId;
      this.distributionState.timestamp = Date.now();
      await this.stateRepository.saveState(this.distributionState);
    }
  }

  private async loadDistributionState(userId: string): Promise<void> {
    this.distributionState = await this.stateRepository.getState(userId);
  }

  private async clearDistributionState(userId: string): Promise<void> {
    await this.stateRepository.deleteState(userId);
    this.distributionState = null;
  }
} 