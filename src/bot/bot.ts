import { Telegraf, Markup, Context } from 'telegraf';
import { Message, Update } from 'telegraf/typings/core/types/typegram';
import { WalletService } from '../services/WalletService';
import { TransactionService } from '../services/TransactionService';
import { WalletSetService } from '../services/WalletSetService';
import { PumpFunService } from '../services/PumpFunService';
import { TokenHistoryService } from '../services/TokenHistoryService';
import fetch from 'node-fetch';
import * as fs from 'fs';
import * as path from 'path';
import dotenv from 'dotenv';
import { Keypair, LAMPORTS_PER_SOL, SendTransactionError } from '@solana/web3.js';
import { message } from 'telegraf/filters';
import sharp from 'sharp';
import { PublicKey } from '@solana/web3.js';

dotenv.config();

if (!process.env.BOT_TOKEN) {
  throw new Error('BOT_TOKEN must be provided in environment variables');
}

const bot = new Telegraf(process.env.BOT_TOKEN);
const walletService = new WalletService();
const transactionService = new TransactionService(walletService);
const walletSetService = new WalletSetService();
const pumpFunService = new PumpFunService(walletService);
const tokenHistoryService = new TokenHistoryService();

interface TokenData {
  name: string;
  symbol: string;
  description: string;
  twitter?: string;
  telegram?: string;
  website?: string;
  picture?: Buffer;
  walletNumber?: number;
}

interface BundleTransaction {
  walletNumber: number;
  amount: number;
  signature?: string;
}

interface BundleData {
  retentionPercent: number;
  totalSol: number;
  transactions: BundleTransaction[];
  mintAddress?: string;
}

interface UserState {
  waitingForAmount?: boolean;
  distributionType?: 'bundle' | 'marketMakers' | 'checkBalance' | 'buyToken' | 'bundleBuy' | 'sell_all';
  useLookupTable?: boolean;
  step?: string;
  tokenData?: TokenData;
  mintAddress?: string;
  walletNumber?: number;
  bundleData?: BundleData;
}

type MessageContext = Context<Update> & {
  message: Update.New & Update.NonChannel & Message.TextMessage;
};

const userStates = new Map<string, UserState>();

// Create dev wallet
async function createDevWallet() {
  console.log('Creating new dev wallet...');
  const keypair = Keypair.generate();
  const wallet = {
    publicKey: keypair.publicKey.toString(),
    privateKey: Buffer.from(keypair.secretKey).toString('base64')
  };
  
  // Save wallet to file
  fs.writeFileSync(path.join(__dirname, '../../dev-wallet.json'), JSON.stringify(wallet, null, 2));
  
  // Set in wallet service
  walletService.setDevWallet(keypair);
  
  return wallet;
}

// Initialize dev wallet
async function initDevWallet() {
  const walletPath = path.join(__dirname, '../../dev-wallet.json');
  
  try {
    if (fs.existsSync(walletPath)) {
      console.log('Loading existing dev wallet...');
      const wallet = JSON.parse(fs.readFileSync(walletPath, 'utf8'));
      const secretKey = Buffer.from(wallet.privateKey, 'base64');
      const keypair = Keypair.fromSecretKey(secretKey);
      walletService.setDevWallet(keypair);
      return wallet;
    }
  } catch (error) {
    console.error('Error loading dev wallet:', error);
  }
  
  return createDevWallet();
}

// Add debug middleware to log all updates
bot.use((ctx, next) => {
  console.log('Received update:', JSON.stringify(ctx.update, null, 2));
  return next();
});

// Main menu buttons
const MAIN_MENU_BUTTONS = {
  WALLETS: 'üëõ Wallets',
  LAUNCH: 'üöÄ Launch',
  EDIT_LAUNCH: '‚öôÔ∏è Edit Launch'
};

// Submenu buttons for Wallets section
const WALLET_MENU_BUTTONS = {
  CREATE_WALLETS: '‚ûï Create Wallets',
  DISTRIBUTE_BUNDLE: 'üí∞ Distribute Bundle',
  DISTRIBUTE_MARKET: 'üìä Distribute Market Making',
  CHECK_BALANCE: 'üí≥ Check Balance',
  DEV_WALLET: 'üîë Dev Wallet Info',
  WALLET_SETS: 'üìö Wallet Sets',
  BACK: '‚¨ÖÔ∏è Back to Main Menu'
};

// Submenu buttons for Launch section
const LAUNCH_MENU_BUTTONS = {
  CREATE_TOKEN: 'ü™ô Create Token',
  BUY_TOKEN: 'üí∏ Buy Token',
  SELL_ALL: 'üí∞ Sell All Tokens',
  MY_TOKENS: 'üìú My Tokens',
  BACK: '‚¨ÖÔ∏è Back to Main Menu'
};

// Submenu buttons for Edit Launch section
const EDIT_LAUNCH_MENU_BUTTONS = {
  TOGGLE_VOLUME: 'üìà Toggle Volume',
  TOGGLE_BUYBACKS: 'üí´ Toggle Buybacks',
  MANAGE_LIQUIDITY: 'üíß Manage Liquidity',
  BACK: '‚¨ÖÔ∏è Back to Main Menu'
};

// Helper function to create main menu keyboard
function getMainMenuKeyboard() {
  return Markup.keyboard([
    [MAIN_MENU_BUTTONS.WALLETS],
    [MAIN_MENU_BUTTONS.LAUNCH],
    [MAIN_MENU_BUTTONS.EDIT_LAUNCH]
  ]).resize();
}

// Helper function to create wallets submenu keyboard
function getWalletsMenuKeyboard() {
  return Markup.keyboard([
    [WALLET_MENU_BUTTONS.CREATE_WALLETS],
    [WALLET_MENU_BUTTONS.DISTRIBUTE_BUNDLE, WALLET_MENU_BUTTONS.DISTRIBUTE_MARKET],
    [WALLET_MENU_BUTTONS.CHECK_BALANCE, WALLET_MENU_BUTTONS.DEV_WALLET],
    [WALLET_MENU_BUTTONS.WALLET_SETS],
    [WALLET_MENU_BUTTONS.BACK]
  ]).resize();
}

// Helper function to create launch submenu keyboard
function getLaunchMenuKeyboard() {
  return Markup.keyboard([
    [LAUNCH_MENU_BUTTONS.CREATE_TOKEN],
    [LAUNCH_MENU_BUTTONS.BUY_TOKEN, LAUNCH_MENU_BUTTONS.SELL_ALL],
    [LAUNCH_MENU_BUTTONS.MY_TOKENS],
    [LAUNCH_MENU_BUTTONS.BACK]
  ]).resize();
}

// Helper function to create edit launch submenu keyboard
function getEditLaunchMenuKeyboard() {
  return Markup.keyboard([
    [EDIT_LAUNCH_MENU_BUTTONS.TOGGLE_VOLUME],
    [EDIT_LAUNCH_MENU_BUTTONS.TOGGLE_BUYBACKS],
    [EDIT_LAUNCH_MENU_BUTTONS.MANAGE_LIQUIDITY],
    [EDIT_LAUNCH_MENU_BUTTONS.BACK]
  ]).resize();
}

// Update start command to show main menu
bot.command('start', async (ctx) => {
  console.log('Received start command from:', ctx.from?.username);
  
  try {
    // 1. Initialize dev wallet
    const wallet = await initDevWallet();
    const balance = await transactionService.getDevWalletBalance(wallet.publicKey);
    
    // 2. Send welcome message
    const welcomeMsg = 'üëã Welcome to PumpFun Bot!\n\n' +
                      'This bot helps you manage wallets and launch tokens on Pump.fun.\n\n' +
                      'üìç Please select a section from the main menu below:';
    
    await ctx.reply(welcomeMsg, getMainMenuKeyboard());
    
  } catch (error) {
    console.error('Error in start command:', error);
    ctx.reply('‚ùå Error initializing bot. Please try again later.');
  }
});

// Handle main menu navigation
bot.hears(MAIN_MENU_BUTTONS.WALLETS, async (ctx) => {
  const message = 'üëõ <b>Wallets Management</b>\n\n' +
                  'Here you can:\n' +
                  '‚Ä¢ Create new wallets\n' +
                  '‚Ä¢ Distribute SOL to bundle wallets\n' +
                  '‚Ä¢ Distribute SOL to market making wallets\n' +
                  '‚Ä¢ Check wallet balances\n' +
                  '‚Ä¢ View wallet sets\n\n' +
                  'Please select an action:';
  
  await ctx.reply(message, {
    parse_mode: 'HTML',
    ...getWalletsMenuKeyboard()
  });
});

bot.hears(MAIN_MENU_BUTTONS.LAUNCH, async (ctx) => {
  const message = 'üöÄ <b>Token Launch</b>\n\n' +
                  'Here you can:\n' +
                  '‚Ä¢ Create new tokens\n' +
                  '‚Ä¢ Buy existing tokens\n' +
                  '‚Ä¢ Sell all tokens\n' +
                  '‚Ä¢ View your tokens\n\n' +
                  'Please select an action:';
  
  await ctx.reply(message, {
    parse_mode: 'HTML',
    ...getLaunchMenuKeyboard()
  });
});

bot.hears(MAIN_MENU_BUTTONS.EDIT_LAUNCH, async (ctx) => {
  const message = '‚öôÔ∏è <b>Launch Management</b>\n\n' +
                  'Here you can:\n' +
                  '‚Ä¢ Toggle trading volume\n' +
                  '‚Ä¢ Configure buybacks\n' +
                  '‚Ä¢ Manage liquidity\n\n' +
                  'Please select an action:';
  
  await ctx.reply(message, {
    parse_mode: 'HTML',
    ...getEditLaunchMenuKeyboard()
  });
});

// Handle back button for all submenus
bot.hears([WALLET_MENU_BUTTONS.BACK, LAUNCH_MENU_BUTTONS.BACK, EDIT_LAUNCH_MENU_BUTTONS.BACK], async (ctx) => {
  const message = 'üìç Main Menu\n\nPlease select a section:';
  await ctx.reply(message, getMainMenuKeyboard());
});

// Handle wallet menu buttons
bot.hears(WALLET_MENU_BUTTONS.CREATE_WALLETS, async (ctx) => {
  console.log('Received create wallets button click');
  
  try {
    const wallet = await initDevWallet();
    const balance = await transactionService.getDevWalletBalance(wallet.publicKey);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('Yes, create with Lookup Tables', 'create_with_lut'),
        Markup.button.callback('No, just create wallets', 'create_without_lut')
      ]
    ]);
    
    let message = 'Do you want to create Lookup Tables along with the wallets?\n\n' +
                  'Lookup Tables allow for more efficient transactions but require SOL for creation.';
    
    if (balance < 0.03) {
      message += '\n\n‚ö†Ô∏è Warning: Dev wallet has insufficient SOL for creating Lookup Tables.\n' +
                 `Current balance: ${balance.toFixed(4)} SOL\n` +
                 `Dev wallet address: ${wallet.publicKey}\n` +
                 'Please fund this wallet with at least 0.03 SOL before creating Lookup Tables.';
    } else {
      message += `\n\nDev wallet balance: ${balance.toFixed(4)} SOL ‚úÖ`;
    }
    
    ctx.reply(message, keyboard);
  } catch (error) {
    console.error('Error in create_wallets button:', error);
    ctx.reply('‚ùå Error preparing wallet creation. Please try again later.');
  }
});

bot.hears(WALLET_MENU_BUTTONS.DISTRIBUTE_BUNDLE, async (ctx) => {
  console.log('Received distribute bundle button click');
  
  try {
    const wallet = await initDevWallet();
    await transactionService.loadWalletsFromSet();
    const balance = await transactionService.getWalletBalance(24);
    
    await ctx.reply(
      '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SOL –Ω–∞ bundle –∫–æ—à–µ–ª—å–∫–∏\n\n' +
      `üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ #24: ${balance.toFixed(4)} SOL\n\n` +
      '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É SOL –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:'
    );

    userStates.set(ctx.from.id.toString(), {
      waitingForAmount: true,
      distributionType: 'bundle',
      tokenData: createEmptyTokenData()
    });
  } catch (error) {
    console.error('Error in distribute_bundle button:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.hears(WALLET_MENU_BUTTONS.DISTRIBUTE_MARKET, async (ctx) => {
  console.log('Received distribute market button click');
  
  try {
    const wallet = await initDevWallet();
    await transactionService.loadWalletsFromSet();
    const balance = await transactionService.getWalletBalance(25);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('–° Lookup Table', 'distribute_with_lut'),
        Markup.button.callback('–ë–µ–∑ Lookup Table', 'distribute_without_lut')
      ]
    ]);
    
    await ctx.reply(
      '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SOL –Ω–∞ market making –∫–æ—à–µ–ª—å–∫–∏\n\n' +
      `üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ #25: ${balance.toFixed(4)} SOL\n\n` +
      '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:',
      keyboard
    );
  } catch (error) {
    console.error('Error in distribute_market button:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.hears(WALLET_MENU_BUTTONS.CHECK_BALANCE, async (ctx) => {
  console.log('Received check balance button click');
  
  const userId = ctx.from?.id;
  if (!userId) return;

  userStates.set(userId.toString(), {
    waitingForAmount: true,
    distributionType: 'checkBalance',
    tokenData: createEmptyTokenData()
  });

  await ctx.reply(
    'üí∞ –ü–æ–∏—Å–∫ –∫–æ—à–µ–ª—å–∫–æ–≤ –ø–æ –±–∞–ª–∞–Ω—Å—É\n\n' +
    '–í–≤–µ–¥–∏—Ç–µ –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é —Å—É–º–º—É SOL –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ—à–µ–ª—å–∫–æ–≤\n' +
    '–ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –≤—ã –≤–≤–µ–¥–µ—Ç–µ "1.5", –±–æ—Ç –ø–æ–∫–∞–∂–µ—Ç –≤—Å–µ –∫–æ—à–µ–ª—å–∫–∏ —Å –±–∞–ª–∞–Ω—Å–æ–º –æ—Ç 1.5 SOL –∏ –≤—ã—à–µ\n\n' +
    '–§–æ—Ä–º–∞—Ç: —á–∏—Å–ª–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.5" –∏–ª–∏ "0.5")'
  );
});

bot.hears(WALLET_MENU_BUTTONS.DEV_WALLET, async (ctx) => {
  console.log('Received dev wallet button click');
  
  try {
    const wallet = await initDevWallet();
    const balance = await transactionService.getDevWalletBalance(wallet.publicKey);
    
    let message = 'üîë Dev Wallet Information:\n\n' +
                  `üìù Public Key: ${wallet.publicKey}\n` +
                  `üí∞ Balance: ${balance.toFixed(4)} SOL\n\n`;
    
    if (balance < 0.03) {
      message += '‚ö†Ô∏è This wallet has insufficient SOL for creating Lookup Tables.\n' +
                 'Please fund this wallet with at least 0.03 SOL.\n\n' +
                 'üí° You can use:\n' +
                 '- Solana Faucet: https://faucet.solana.com\n' +
                 '- Transfer SOL from another wallet';
    } else {
      message += '‚úÖ This wallet has sufficient SOL for creating Lookup Tables.';
    }
    
    ctx.reply(message);
  } catch (error) {
    console.error('Error in dev_wallet button:', error);
    ctx.reply('‚ùå Error checking dev wallet. Please try again later.');
  }
});

bot.hears(WALLET_MENU_BUTTONS.WALLET_SETS, async (ctx) => {
  console.log('Received wallet sets button click');
  
  try {
    const sets = walletSetService.getWalletSets();
    
    if (sets.length === 0) {
      ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å –ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–∫–∏ "Create Wallets"');
      return;
    }

    let message = 'üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –∫–æ—à–µ–ª—å–∫–æ–≤:\n\n';
    sets.forEach(set => {
      const date = set.createdAt.toLocaleDateString('ru-RU');
      message += `üîπ –ù–∞–±–æ—Ä ${set.id} (—Å–æ–∑–¥–∞–Ω ${date})\n`;
    });

    ctx.reply(message);
  } catch (error) {
    console.error('Error in wallet_sets button:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Handle launch menu buttons
bot.hears(LAUNCH_MENU_BUTTONS.CREATE_TOKEN, async (ctx) => {
  console.log('Received create token button click');
  console.log('User ID:', ctx.from?.id);
  
  try {
    console.log('Setting up user state for token creation...');
    const userId = ctx.from.id.toString();
    userStates.set(userId, {
      step: 'wallet',
      tokenData: createEmptyTokenData()
    });
    
    console.log('User state initialized:', userStates.get(userId));

    await ctx.reply(
      'ü™ô –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞\n\n' +
      '–° –∫–∞–∫–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω?\n' +
      '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ (0-100):\n\n' +
      '0 - dev –∫–æ—à–µ–ª–µ–∫\n' +
      '1-23 - bundle –∫–æ—à–µ–ª—å–∫–∏\n' +
      '24 - bundle payer –∫–æ—à–µ–ª–µ–∫\n' +
      '25 - market making payer –∫–æ—à–µ–ª–µ–∫\n' +
      '26-100 - market making –∫–æ—à–µ–ª—å–∫–∏'
    );
    
    console.log('Launch command completed successfully');
  } catch (error) {
    console.error('Error in create_token button:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.hears(LAUNCH_MENU_BUTTONS.BUY_TOKEN, async (ctx) => {
  console.log('Received buy token button click');
  
  try {
    await ctx.reply(
      'ü™ô –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ Pump.fun\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∫—É–ø–∫–∏:',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –û–¥–∏–Ω–æ—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞', callback_data: 'buy_single' },
              { text: 'üì¶ Bundle –ø–æ–∫—É–ø–∫–∞', callback_data: 'buy_bundle' }
            ]
          ]
        }
      }
    );
  } catch (error) {
    console.error('Error in buy_token button:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∫—É–ø–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.hears(LAUNCH_MENU_BUTTONS.SELL_ALL, async (ctx) => {
  try {
    const userId = ctx.from.id.toString();
    console.log('Sell All button clicked by user:', userId);

    await ctx.reply(
      'üìù –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (mint address) –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏ —Å–æ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤:'
    );

    userStates.set(userId, {
      step: 'sell_all',
      distributionType: 'sell_all',
      tokenData: createEmptyTokenData()
    });
    
    console.log('User state set:', userStates.get(userId));
  } catch (error) {
    console.error('Error in sell_all button:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø—Ä–æ–¥–∞–∂–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

bot.hears(LAUNCH_MENU_BUTTONS.MY_TOKENS, async (ctx) => {
  console.log('Received my tokens button click');
  
  if (!ctx.from?.id) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  const userId = ctx.from.id;
  console.log(`User ${userId} requested their tokens`);
  
  try {
    const tokens = await tokenHistoryService.getUserTokens(userId);
    
    if (tokens.length === 0) {
      await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "Create Token", —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–π –ø–µ—Ä–≤—ã–π —Ç–æ–∫–µ–Ω!');
      return;
    }
    
    const sortedTokens = [...tokens].sort((a, b) => 
      new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
    );
    
    let message = 'ü™ô <b>–í–∞—à–∏ —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω—ã:</b>\n\n';
    
    sortedTokens.forEach((token, index) => {
      const date = new Date(token.createdAt);
      const dateStr = date.toLocaleDateString('ru-RU');
      const timeStr = date.toLocaleTimeString('ru-RU');
      
      message += `<b>${index + 1}. ${token.mintAddress}</b>\n`;
      message += `üìÖ –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ${dateStr} ${timeStr}\n`;
      message += `üîç –°—Ç–∞—Ç—É—Å: ${token.exists ? '‚úÖ –°—É—â–µ—Å—Ç–≤—É–µ—Ç' : '‚ùì –ù–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω'}\n`;
      message += `üîó <a href="${token.solscanUrl}">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Solscan</a>\n\n`;
    });
    
    message += '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É "Create Token", —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω!';
    
    await ctx.telegram.sendMessage(ctx.chat.id, message, {
      parse_mode: 'HTML'
    });
  } catch (error) {
    console.error('Error fetching user tokens:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –≤–∞—à–∏—Ö —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Placeholder handlers for Edit Launch section (to be implemented)
bot.hears(EDIT_LAUNCH_MENU_BUTTONS.TOGGLE_VOLUME, async (ctx) => {
  await ctx.reply('üîß Volume management feature is coming soon!');
});

bot.hears(EDIT_LAUNCH_MENU_BUTTONS.TOGGLE_BUYBACKS, async (ctx) => {
  await ctx.reply('üîß Buybacks management feature is coming soon!');
});

bot.hears(EDIT_LAUNCH_MENU_BUTTONS.MANAGE_LIQUIDITY, async (ctx) => {
  await ctx.reply('üîß Liquidity management feature is coming soon!');
});

// Dev wallet command
bot.command('dev_wallet', async (ctx) => {
  console.log('Received dev_wallet command from:', ctx.from?.username);
  
  try {
    const wallet = await initDevWallet();
    const balance = await transactionService.getDevWalletBalance(wallet.publicKey);
    
    let message = 'üîë Dev Wallet Information:\n\n' +
                  `üìù Public Key: ${wallet.publicKey}\n` +
                  `üí∞ Balance: ${balance.toFixed(4)} SOL\n\n`;
    
    if (balance < 0.03) {
      message += '‚ö†Ô∏è This wallet has insufficient SOL for creating Lookup Tables.\n' +
                 'Please fund this wallet with at least 0.03 SOL.\n\n' +
                 'üí° You can use:\n' +
                 '- Solana Faucet: https://faucet.solana.com\n' +
                 '- Transfer SOL from another wallet';
    } else {
      message += '‚úÖ This wallet has sufficient SOL for creating Lookup Tables.';
    }
    
    ctx.reply(message);
  } catch (error) {
    console.error('Error in dev_wallet command:', error);
    ctx.reply('‚ùå Error checking dev wallet. Please try again later.');
  }
});

// Create wallets command
bot.command('create_wallets', async (ctx) => {
  console.log('Received create_wallets command from:', ctx.from?.username);
  
  try {
    const wallet = await initDevWallet();
    const balance = await transactionService.getDevWalletBalance(wallet.publicKey);
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('Yes, create with Lookup Tables', 'create_with_lut'),
        Markup.button.callback('No, just create wallets', 'create_without_lut')
      ]
    ]);
    
    let message = 'Do you want to create Lookup Tables along with the wallets?\n\n' +
                  'Lookup Tables allow for more efficient transactions but require SOL for creation.';
    
    if (balance < 0.03) {
      message += '\n\n‚ö†Ô∏è Warning: Dev wallet has insufficient SOL for creating Lookup Tables.\n' +
                 `Current balance: ${balance.toFixed(4)} SOL\n` +
                 `Dev wallet address: ${wallet.publicKey}\n` +
                 'Please fund this wallet with at least 0.03 SOL before creating Lookup Tables.';
    } else {
      message += `\n\nDev wallet balance: ${balance.toFixed(4)} SOL ‚úÖ`;
    }
    
    ctx.reply(message, keyboard);
  } catch (error) {
    console.error('Error in create_wallets command:', error);
    ctx.reply('‚ùå Error preparing wallet creation. Please try again later.');
  }
});

// Handle wallet creation choice
bot.action(/create_(with|without)_lut/, async (ctx) => {
  const createWithLUT = ctx.match[1] === 'with';
  
  try {
    const wallet = await initDevWallet();
    
    if (createWithLUT) {
      const balance = await transactionService.getDevWalletBalance(wallet.publicKey);
      
      if (balance < 0.03) {
        ctx.reply(`‚ö†Ô∏è Warning: Dev wallet has insufficient SOL for creating Lookup Tables.\n` +
                  `Current balance: ${balance.toFixed(4)} SOL\n` +
                  `Dev wallet address: ${wallet.publicKey}\n\n` +
                  `Proceeding with wallet creation, but Lookup Tables will not be created.\n` +
                  `Please fund the dev wallet and try again later.`);
        
        const result = await walletService.generateWallets(false);
        await handleWalletCreationResult(ctx, result, true);
        return;
      }
    }
    
    ctx.reply(`Starting wallet generation process${createWithLUT ? ' with Lookup Tables' : ''}...\n` +
              'This may take a few minutes...');
    
    const result = await walletService.generateWallets(createWithLUT);
    await handleWalletCreationResult(ctx, result, createWithLUT);
  } catch (error) {
    console.error('Error generating wallets:', error);
    ctx.reply('‚ùå Error generating wallets. Please try again later.');
  }
});

// Helper function to handle wallet creation result
async function handleWalletCreationResult(ctx: any, result: any, requestedLUT: boolean) {
  console.log('Wallets generated, sending file:', result.csvFilePath);
  
  await ctx.replyWithDocument({ 
    source: fs.createReadStream(result.csvFilePath),
    filename: 'wallets.csv'
  });

  if (result.bundleLUT && result.marketMakingLUT) {
    console.log('Setting LUT addresses:', result.bundleLUT, result.marketMakingLUT);
    transactionService.setLookupTableAddresses(result.bundleLUT, result.marketMakingLUT);
  }

  // Load wallets into TransactionService
  console.log('Loading wallets into TransactionService...');
  // Wallets are already loaded automatically
  
  // Create new wallet set
  const wallets = await parseWalletsCsv(result.csvFilePath);
  const setId = await walletSetService.createWalletSet(wallets);

  fs.unlinkSync(result.csvFilePath);
  console.log('File sent and deleted successfully');
  
  let message = '‚úÖ –ö–æ—à–µ–ª—å–∫–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!\n\n' +
                `üìù –ù–∞–±–æ—Ä –∫–æ—à–µ–ª—å–∫–æ–≤: ${setId}\n` +
                'üìù –ö–æ—à–µ–ª–µ–∫ #0 - dev –∫–æ—à–µ–ª–µ–∫\n' +
                'üìù –ö–æ—à–µ–ª—å–∫–∏ #1-23 - bundle –∫–æ—à–µ–ª—å–∫–∏\n' +
                'üìù –ö–æ—à–µ–ª–µ–∫ #24 - bundle payer –∫–æ—à–µ–ª–µ–∫\n' +
                'üìù –ö–æ—à–µ–ª–µ–∫ #25 - market making payer –∫–æ—à–µ–ª–µ–∫\n' +
                'üìù –ö–æ—à–µ–ª—å–∫–∏ #26-100 - market making –∫–æ—à–µ–ª—å–∫–∏';
  
  if (requestedLUT && result.bundleLUT && result.marketMakingLUT) {
    message += '\n\nüìä Lookup Tables —Å–æ–∑–¥–∞–Ω—ã:\n' +
               `üìù Bundle Lookup Table: ${result.bundleLUT}\n` +
               `üìù Market Making Lookup Table: ${result.marketMakingLUT}`;
  } else if (requestedLUT && result.error) {
    message += '\n\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: ' + result.error;
    
    if (result.error.includes('has no SOL to pay')) {
      message += '\n\nüìù –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è Lookup Tables –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å dev –∫–æ—à–µ–ª—å–∫–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n' +
                 `üìù –ê–¥—Ä–µ—Å dev –∫–æ—à–µ–ª—å–∫–∞: ${(await initDevWallet()).publicKey}\n` +
                 'üìù –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Solana Faucet –∏–ª–∏ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ SOL —Å –¥—Ä—É–≥–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞.';
    }
  }
  
  ctx.reply(message);
}

// Helper function to parse wallets CSV
async function parseWalletsCsv(csvFilePath: string): Promise<any[]> {
  return new Promise((resolve, reject) => {
    const wallets: any[] = [];
    fs.createReadStream(csvFilePath)
      .pipe(require('csv-parser')())
      .on('data', (data: any) => wallets.push(data))
      .on('end', () => resolve(wallets))
      .on('error', reject);
  });
}

// Wallet sets command
bot.command('wallet_sets', async (ctx) => {
  try {
    const sets = walletSetService.getWalletSets();
    
    if (sets.length === 0) {
      ctx.reply('‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –Ω–∞–±–æ—Ä–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤. –°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π –Ω–∞–±–æ—Ä —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /create_wallets');
      return;
    }

    let message = 'üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞–±–æ—Ä—ã –∫–æ—à–µ–ª—å–∫–æ–≤:\n\n';
    sets.forEach(set => {
      const date = set.createdAt.toLocaleDateString('ru-RU');
      message += `üîπ –ù–∞–±–æ—Ä ${set.id} (—Å–æ–∑–¥–∞–Ω ${date})\n`;
    });

    ctx.reply(message);
  } catch (error) {
    console.error('Error in wallet_sets command:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –Ω–∞–±–æ—Ä–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Initialize empty TokenData
function createEmptyTokenData(): TokenData {
  return {
    name: '',
    symbol: '',
    description: '',
  };
}

// Bundle distribution command
bot.command('distribute_bundle', async (ctx) => {
  console.log('Received distribute_bundle command from:', ctx.from?.username);
  
  try {
    const wallet = await initDevWallet();
    
    // Ensure wallets are loaded from the most recent set
    await transactionService.loadWalletsFromSet();
    
    const balance = await transactionService.getWalletBalance(24); // Check payer wallet balance
    
    await ctx.reply(
      '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SOL –Ω–∞ bundle –∫–æ—à–µ–ª—å–∫–∏\n\n' +
      `üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ #24: ${balance.toFixed(4)} SOL\n\n` +
      '–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É SOL –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:'
    );

    userStates.set(ctx.from.id.toString(), {
      waitingForAmount: true,
      distributionType: 'bundle',
      tokenData: createEmptyTokenData()
    });
  } catch (error) {
    console.error('Error in distribute_bundle command:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Market makers distribution command
bot.command('distribute_market', async (ctx) => {
  console.log('Received distribute_market command from:', ctx.from?.username);
  
  try {
    const wallet = await initDevWallet();
    
    // Ensure wallets are loaded from the most recent set
    await transactionService.loadWalletsFromSet();
    
    const balance = await transactionService.getWalletBalance(25); // Check payer wallet balance
    
    const keyboard = Markup.inlineKeyboard([
      [
        Markup.button.callback('–° Lookup Table', 'distribute_with_lut'),
        Markup.button.callback('–ë–µ–∑ Lookup Table', 'distribute_without_lut')
      ]
    ]);
    
    await ctx.reply(
      '–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SOL –Ω–∞ market making –∫–æ—à–µ–ª—å–∫–∏\n\n' +
      `üí∞ –ë–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ #25: ${balance.toFixed(4)} SOL\n\n` +
      '–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:',
      keyboard
    );
  } catch (error) {
    console.error('Error in distribute_market command:', error);
    ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Handle market making distribution choice
bot.action(/distribute_(with|without)_lut/, async (ctx) => {
  const useTable = ctx.match[1] === 'with';
  const userId = ctx.from?.id.toString();
  
  if (!userId) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  userStates.set(userId, {
    waitingForAmount: true,
    distributionType: 'marketMakers',
    useLookupTable: useTable,
    tokenData: createEmptyTokenData()
  });

  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É SOL –¥–ª—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è:');
});

// Launch command
bot.command('launch', async (ctx) => {
  console.log('Received /launch command from:', ctx.from?.username);
  console.log('User ID:', ctx.from?.id);
  
  try {
    console.log('Setting up user state for token creation...');
    const userId = ctx.from.id.toString();
    userStates.set(userId, {
      step: 'wallet',
      tokenData: createEmptyTokenData()
    });
    
    console.log('User state initialized:', userStates.get(userId));

    await ctx.reply(
      'ü™ô –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Ç–æ–∫–µ–Ω–∞\n\n' +
      '–° –∫–∞–∫–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–æ–∫–µ–Ω?\n' +
      '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ (0-100):\n\n' +
      '0 - dev –∫–æ—à–µ–ª–µ–∫\n' +
      '1-23 - bundle –∫–æ—à–µ–ª—å–∫–∏\n' +
      '24 - bundle payer –∫–æ—à–µ–ª–µ–∫\n' +
      '25 - market making payer –∫–æ—à–µ–ª–µ–∫\n' +
      '26-100 - market making –∫–æ—à–µ–ª—å–∫–∏'
    );
    
    console.log('Launch command completed successfully');
  } catch (error) {
    console.error('Error in launch command:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Buy token command
bot.command('buytoken', async (ctx) => {
  console.log('Received buytoken command from:', ctx.from?.username);
  
  try {
    await ctx.reply(
      'ü™ô –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ Pump.fun\n\n' +
      '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º –ø–æ–∫—É–ø–∫–∏:',
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: 'üîÑ –û–¥–∏–Ω–æ—á–Ω–∞—è –ø–æ–∫—É–ø–∫–∞', callback_data: 'buy_single' },
              { text: 'üì¶ Bundle –ø–æ–∫—É–ø–∫–∞', callback_data: 'buy_bundle' }
            ]
          ]
        }
      }
    );

  } catch (error) {
    console.error('Error in buytoken command:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–æ–∫—É–ø–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Handle buy mode selection
bot.action(/buy_(single|bundle)/, async (ctx) => {
  const mode = ctx.match[1];
  const userId = ctx.from?.id.toString();
  if (!userId) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  if (mode === 'single') {
    await ctx.reply(
      'ü™ô –ü–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞ –Ω–∞ Pump.fun\n\n' +
      '–° –∫–∞–∫–æ–≥–æ –∫–æ—à–µ–ª—å–∫–∞ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å —Ç–æ–∫–µ–Ω?\n' +
      '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ (0-100):\n\n' +
      '0 - dev –∫–æ—à–µ–ª–µ–∫\n' +
      '1-23 - bundle –∫–æ—à–µ–ª—å–∫–∏\n' +
      '24 - bundle payer –∫–æ—à–µ–ª–µ–∫\n' +
      '25 - market making payer –∫–æ—à–µ–ª–µ–∫\n' +
      '26-100 - market making –∫–æ—à–µ–ª—å–∫–∏'
    );

    userStates.set(userId, {
      distributionType: 'buyToken',
      step: 'wallet'
    });
  } else {
    await ctx.reply(
      'üì¶ Bundle –ø–æ–∫—É–ø–∫–∞ —Ç–æ–∫–µ–Ω–∞\n\n' +
      '–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (mint address):'
    );

    userStates.set(userId, {
      distributionType: 'bundleBuy',
      step: 'mint',
      bundleData: {
        retentionPercent: 0,
        totalSol: 0,
        transactions: []
      }
    });
  }
});

// Update message handler for bundle purchase
bot.on('text', async (ctx) => {
  const userId = ctx.from?.id.toString();
  if (!userId) return;

  const userState = userStates.get(userId);
  if (!userState) return;

  console.log('Processing text message. Current user state:', userState);

  try {
    // Handle bundle purchase flow
    if (userState.distributionType === 'bundleBuy') {
      switch (userState.step) {
        case 'mint':
          try {
            const mintAddress = ctx.message.text.trim();
            new PublicKey(mintAddress); // Validate mint address

            userState.bundleData = {
              ...userState.bundleData!,
              mintAddress
            };
            userState.step = 'retention';

            await ctx.reply(
              '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–ª–∞–Ω—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–º –∫–æ—à–µ–ª—å–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):'
            );
          } catch (error) {
            await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
          }
          break;

        case 'retention':
          const percent = parseFloat(ctx.message.text);
          if (isNaN(percent) || percent < 0 || percent > 100) {
            await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ–Ω—Ç –æ—Ç 0 –¥–æ 100');
            return;
          }

          try {
            // Calculate purchases for all bundle wallets
            const transactions: BundleTransaction[] = [];
            let totalSol = 0;
            const maxPoolSize = 85; // Maximum pool size in SOL

            // First, calculate dev wallet purchase (wallet 0)
            const devWallet = await walletService.getWallet(0);
            if (devWallet) {
              const devBalance = await transactionService.getWalletBalance(0);
              const devAmount = devBalance * (1 - percent / 100);
              if (devAmount > 0) {
                transactions.push({ walletNumber: 0, amount: devAmount });
                totalSol += devAmount;
              }
            }

            // Then calculate bundle wallets (1-23)
            for (let i = 1; i <= 23; i++) {
              if (totalSol >= maxPoolSize) break;

              const wallet = await walletService.getWallet(i);
              if (wallet) {
                const balance = await transactionService.getWalletBalance(i);
                const amount = balance * (1 - percent / 100);
                if (amount > 0) {
                  const remainingSpace = maxPoolSize - totalSol;
                  const actualAmount = Math.min(amount, remainingSpace);
                  transactions.push({ walletNumber: i, amount: actualAmount });
                  totalSol += actualAmount;
                  if (totalSol >= maxPoolSize) break;
                }
              }
            }

            userState.bundleData = {
              ...userState.bundleData!,
              retentionPercent: percent,
              totalSol,
              transactions
            };

            // Show summary and confirmation
            let summary = 'üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è bundle –ø–æ–∫—É–ø–∫–∏:\n\n';
            summary += `üîπ –¢–æ–∫–µ–Ω: ${userState.bundleData.mintAddress}\n`;
            summary += `üîπ –ü—Ä–æ—Ü–µ–Ω—Ç –æ—Å—Ç–∞—Ç–∫–∞: ${percent}%\n`;
            summary += `üîπ –í—Å–µ–≥–æ SOL: ${totalSol.toFixed(4)}\n\n`;
            summary += '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n';
            transactions.forEach(tx => {
              summary += `–ö–æ—à–µ–ª–µ–∫ #${tx.walletNumber}: ${tx.amount.toFixed(4)} SOL\n`;
            });
            
            await ctx.reply(
              summary,
              {
                reply_markup: {
                  inline_keyboard: [
                    [
                      { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirm_bundle' },
                      { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_bundle' }
                    ]
                  ]
                }
              }
            );
          } catch (error) {
            console.error('Error calculating bundle purchases:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ bundle –ø–æ–∫—É–ø–æ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          }
          break;
      }
      return;
    }

    // Handle test token buying flow
    if (userState.distributionType === 'buyToken') {
      switch (userState.step) {
        case 'wallet':
          const walletNumber = parseInt(ctx.message.text);
          if (isNaN(walletNumber) || walletNumber < 0 || walletNumber > 100) {
            await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.');
            return;
          }

          try {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
            const loadingMsg = await ctx.reply('‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
            await transactionService.loadWalletsFromSet();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞
            const balance = await transactionService.getWalletBalance(walletNumber);
            const wallet = await walletService.getWallet(walletNumber);
            
            if (!wallet) {
              await ctx.telegram.editMessageText(
                loadingMsg.chat.id,
                loadingMsg.message_id,
                undefined,
                '‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'
              );
              return;
            }

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            userStates.set(userId, {
              ...userState,
              walletNumber,
              step: 'mint'
            });

            let message = `‚úÖ –í—ã–±—Ä–∞–Ω –∫–æ—à–µ–ª–µ–∫ #${walletNumber}\n`;
            message += `üìù –ê–¥—Ä–µ—Å: ${wallet.publicKey.toString()}\n`;
            message += `üí∞ –ë–∞–ª–∞–Ω—Å: ${balance.toFixed(4)} SOL\n\n`;
            message += '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ (mint address):';
            
            await ctx.telegram.editMessageText(
              loadingMsg.chat.id,
              loadingMsg.message_id,
              undefined,
              message
            );
          } catch (error) {
            console.error('Error checking wallet:', error);
            await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          }
          break;

        case 'mint':
          try {
            // Validate mint address
            const mintAddress = ctx.message.text.trim();
            new PublicKey(mintAddress); // This will throw if invalid

            // Update state with mint address
            userStates.set(userId, {
              ...userState,
              mintAddress,
              step: 'amount',
              waitingForAmount: true
            });

            await ctx.reply(
              '‚úÖ –ê–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏–Ω—è—Ç\n\n' +
              '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –¥–ª—è –ø–æ–∫—É–ø–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, "1.5" –∏–ª–∏ "1.5 SOL"):'
            );
          } catch (error) {
            await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
          }
          break;

        case 'amount':
          if (userState.waitingForAmount && userState.mintAddress && userState.walletNumber !== undefined) {
            const text = ctx.message.text.toLowerCase();
            const match = text.match(/^(\d+\.?\d*)\s*(?:sol|—Å–æ–ª–∞–Ω|solana)?$/i);
            
            if (!match) {
              await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ SOL –≤ —Ñ–æ—Ä–º–∞—Ç–µ "1.5" –∏–ª–∏ "1.5 SOL"');
              return;
            }

            const amount = parseFloat(match[1]);
            if (isNaN(amount) || amount <= 0) {
              await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É SOL (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)');
              return;
            }

            const message = await ctx.reply('‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∫—É–ø–∫—É —Ç–æ–∫–µ–Ω–∞...');

            try {
              // Get wallet for buying
              const wallet = await walletService.getWallet(userState.walletNumber);
              if (!wallet) {
                throw new Error(`–ö–æ—à–µ–ª–µ–∫ #${userState.walletNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
              }

              // Execute token purchase
              const signature = await pumpFunService.buyTokens(
                new PublicKey(userState.mintAddress),
                amount,
                1, // –ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∏—Ç—å
                wallet
              );

              let resultMessage = '‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –∫—É–ø–ª–µ–Ω!\n\n';
              resultMessage += `üí∞ –ü–æ—Ç—Ä–∞—á–µ–Ω–æ: ${amount} SOL\n`;
              resultMessage += `üîó Transaction: https://solscan.io/tx/${signature}\n`;
              resultMessage += `üìù Mint Address: ${userState.mintAddress}\n`;
              resultMessage += `üè¶ –ö–æ—à–µ–ª–µ–∫: #${userState.walletNumber}\n`;
              
              await ctx.telegram.editMessageText(
                message.chat.id,
                message.message_id,
                undefined,
                resultMessage
              );

              // Clear user state
              userStates.delete(userId);

            } catch (error) {
              console.error('Error buying token:', error);
              let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ —Ç–æ–∫–µ–Ω–∞:\n';
              
              if (error instanceof Error) {
                errorMessage += error.message;
                
                // Add transaction logs if available
                if ('logs' in error) {
                  console.error('Transaction logs:', (error as any).logs);
                  errorMessage += '\n\n–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –æ—à–∏–±–∫–∏:\n';
                  errorMessage += (error as any).logs.join('\n');
                }
              } else {
                errorMessage += '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
              }
              
              await ctx.telegram.editMessageText(
                message.chat.id,
                message.message_id,
                undefined,
                errorMessage
              );
            }
          }
          break;
      }
      return;
    }

    // Handle sell_all flow
    if (userState.distributionType === 'sell_all' && userState.step === 'sell_all') {
      try {
        console.log('Starting sell_all process...');
        const mintAddress = ctx.message.text.trim();
        console.log('Mint address received:', mintAddress);
        
        try {
          const mint = new PublicKey(mintAddress);
          console.log('Mint address validated');

          const message = await ctx.reply('‚è≥ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–¥–∞–∂—É —Ç–æ–∫–µ–Ω–æ–≤ —Å–æ –≤—Å–µ—Ö –∫–æ—à–µ–ª—å–∫–æ–≤...');
          console.log('Initial message sent');
          
          // Ensure wallets are loaded
          console.log('Loading wallets from set...');
          await transactionService.loadWalletsFromSet();
          console.log('Wallets loaded successfully');
          
          console.log('Starting sellAllTokens...');
          const results = await pumpFunService.sellAllTokens(
            mint,
            async (progressText) => {
              console.log('Progress update:', progressText);
              try {
                await ctx.telegram.editMessageText(
                  message.chat.id,
                  message.message_id,
                  undefined,
                  progressText
                );
              } catch (error) {
                console.error('Error updating progress message:', error);
              }
            }
          );
          console.log('sellAllTokens completed. Results:', results);

          // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –∏—Ç–æ–≥–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
          let successCount = results.filter(r => r.signature).length;
          let failCount = results.filter(r => r.error).length;
          let skipCount = results.length - successCount - failCount;

          let resultMessage = 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–¥–∞–∂–∏ —Ç–æ–∫–µ–Ω–æ–≤:\n\n';
          resultMessage += `‚úÖ –£—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω–æ: ${successCount}\n`;
          resultMessage += `‚ùå –û—à–∏–±–æ–∫: ${failCount}\n`;
          resultMessage += `‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ (–Ω–µ—Ç —Ç–æ–∫–µ–Ω–æ–≤): ${skipCount}\n\n`;
          
          if (successCount > 0) {
            resultMessage += 'üîç –£—Å–ø–µ—à–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n';
            results.forEach(result => {
              if (result.signature) {
                resultMessage += `–ö–æ—à–µ–ª–µ–∫ #${result.walletNumber}: https://solscan.io/tx/${result.signature}\n`;
              }
            });
          }

          if (failCount > 0) {
            resultMessage += '\n‚ùå –û—à–∏–±–∫–∏:\n';
            results.forEach(result => {
              if (result.error) {
                resultMessage += `–ö–æ—à–µ–ª–µ–∫ #${result.walletNumber}: ${result.error}\n`;
              }
            });
          }

          resultMessage += `\nüîó –¢–æ–∫–µ–Ω: https://pump.fun/token/${mintAddress}`;

          await ctx.telegram.editMessageText(
            message.chat.id,
            message.message_id,
            undefined,
            resultMessage
          );

          // –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
          userStates.delete(userId);
        } catch (error) {
          console.error('Error validating mint address:', error);
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
        }
      } catch (error) {
        console.error('Error in sell_all step:', error);
        await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–∞–∂–µ —Ç–æ–∫–µ–Ω–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
        userStates.delete(userId);
      }
      return;
    }

    // Handle token creation flow
    if (userState.step) {
      console.log('Processing token creation step:', userState.step);
      
      if (!userState.tokenData) {
        userState.tokenData = createEmptyTokenData();
      }

      switch (userState.step) {
        case 'wallet':
          const walletNumber = parseInt(ctx.message.text);
          if (isNaN(walletNumber) || walletNumber < 0 || walletNumber > 100) {
            await ctx.reply('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 0 –¥–æ 100.');
            return;
          }

          try {
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            const loadingMsg = await ctx.reply('‚è≥ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—à–µ–ª—å–∫–∞...');
            
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ—à–µ–ª—å–∫–∏ –∏–∑ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –Ω–∞–±–æ—Ä–∞
            await transactionService.loadWalletsFromSet();
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞
            const balance = await transactionService.getWalletBalance(walletNumber);
            const wallet = await walletService.getWallet(walletNumber);
            
            if (!wallet) {
              await ctx.telegram.editMessageText(
                loadingMsg.chat.id,
                loadingMsg.message_id,
                undefined,
                '‚ùå –û—à–∏–±–∫–∞: –∫–æ—à–µ–ª–µ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω'
              );
              return;
            }

            userState.tokenData.walletNumber = walletNumber;
            userState.step = 'name';

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–æ—à–µ–ª—å–∫–µ
            let message = `‚úÖ –í—ã–±—Ä–∞–Ω –∫–æ—à–µ–ª–µ–∫ #${walletNumber}\n`;
            message += `üìù –ê–¥—Ä–µ—Å: ${wallet.publicKey.toString()}\n`;
            message += `üí∞ –ë–∞–ª–∞–Ω—Å: ${balance.toFixed(4)} SOL\n\n`;

            // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–º –±–∞–ª–∞–Ω—Å–µ
            const minBalance = pumpFunService.MIN_SOL_BALANCE || 0.015;
            if (balance < minBalance) {
              message += `‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ: –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º ${minBalance} SOL\n`;
              message += `–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞ –Ω–∞ ${(minBalance - balance).toFixed(4)} SOL\n\n`;
            }

            message += '–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:';
            
            await ctx.telegram.editMessageText(
              loadingMsg.chat.id,
              loadingMsg.message_id,
              undefined,
              message
            );
          } catch (error) {
            console.error('Error checking wallet:', error);
            await ctx.reply(
              '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ—à–µ–ª—å–∫–∞.\n' +
              '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:\n' +
              '1. –í—ã —Å–æ–∑–¥–∞–ª–∏ –∫–æ—à–µ–ª—å–∫–∏ —á–µ—Ä–µ–∑ –∫–æ–º–∞–Ω–¥—É /create_wallets\n' +
              '2. –§–∞–π–ª wallets.csv —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –¥–æ—Å—Ç—É–ø–µ–Ω\n' +
              '3. –ö–æ—à–µ–ª–µ–∫ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –Ω–æ–º–µ—Ä–æ–º —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
            );
            return;
          }
          break;

        case 'name':
          if (ctx.message.text.length > 32) {
            await ctx.reply('‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 32 —Å–∏–º–≤–æ–ª–∞');
            return;
          }
          userState.tokenData.name = ctx.message.text;
          userState.step = 'symbol';
          await ctx.reply(`‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞: ${ctx.message.text}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, BTC):`);
          break;

        case 'symbol':
          if (ctx.message.text.length > 10) {
            await ctx.reply('‚ùå –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 10 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
          }
          // Validate symbol format
          const symbolText = ctx.message.text.toUpperCase();
          if (!/^[A-Z0-9]+$/.test(symbolText)) {
            await ctx.reply('‚ùå –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã');
            return;
          }
          userState.tokenData.symbol = symbolText;
          userState.step = 'description';
          await ctx.reply(`‚úÖ –°–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞: ${symbolText}\n\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:`);
          break;

        case 'description':
          if (ctx.message.text.length > 1000) {
            await ctx.reply('‚ùå –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 1000 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
          }
          userState.tokenData.description = ctx.message.text;
          userState.step = 'twitter';
          await ctx.reply(`‚úÖ –û–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Twitter (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç"):`);
          break;

        case 'twitter':
          if (ctx.message.text !== '–Ω–µ—Ç' && ctx.message.text.length > 100) {
            await ctx.reply('‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ Twitter —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 100 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
          }
          userState.tokenData.twitter = ctx.message.text === '–Ω–µ—Ç' ? undefined : ctx.message.text;
          userState.step = 'telegram';
          await ctx.reply(`‚úÖ Twitter ${ctx.message.text === '–Ω–µ—Ç' ? '–ø—Ä–æ–ø—É—â–µ–Ω' : '—Å–æ—Ö—Ä–∞–Ω–µ–Ω'}\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ Telegram (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç"):`);
          break;

        case 'telegram':
          if (ctx.message.text !== '–Ω–µ—Ç' && ctx.message.text.length > 100) {
            await ctx.reply('‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ Telegram —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 100 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
          }
          userState.tokenData.telegram = ctx.message.text === '–Ω–µ—Ç' ? undefined : ctx.message.text;
          userState.step = 'website';
          await ctx.reply(`‚úÖ Telegram ${ctx.message.text === '–Ω–µ—Ç' ? '–ø—Ä–æ–ø—É—â–µ–Ω' : '—Å–æ—Ö—Ä–∞–Ω–µ–Ω'}\n\n–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –≤–µ–±-—Å–∞–π—Ç (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ "–Ω–µ—Ç"):`);
          break;

        case 'website':
          if (ctx.message.text !== '–Ω–µ—Ç' && ctx.message.text.length > 100) {
            await ctx.reply('‚ùå –°—Å—ã–ª–∫–∞ –Ω–∞ –≤–µ–±-—Å–∞–π—Ç —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞: 100 —Å–∏–º–≤–æ–ª–æ–≤');
            return;
          }
          userState.tokenData.website = ctx.message.text === '–Ω–µ—Ç' ? undefined : ctx.message.text;
          userState.step = 'picture';
          await ctx.reply(
            `‚úÖ –í–µ–±-—Å–∞–π—Ç ${ctx.message.text === '–Ω–µ—Ç' ? '–ø—Ä–æ–ø—É—â–µ–Ω' : '—Å–æ—Ö—Ä–∞–Ω–µ–Ω'}\n\n` +
            '–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ç–æ–∫–µ–Ω–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG).\n\n' +
            '‚ö†Ô∏è –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ. –ï—Å–ª–∏ –≤—ã –Ω–µ —Ö–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞–∂–º–∏—Ç–µ "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å" –Ω–∏–∂–µ.',
            {
              reply_markup: {
                inline_keyboard: [
                  [
                    { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –±–µ–∑ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è', callback_data: 'confirm_without_image' }
                  ]
                ]
              }
            }
          );
          break;
      }
      console.log('Updated user state after token creation step:', userState);
      return;
    }

    // Handle SOL distribution amount input
    if (userState.waitingForAmount) {
      const amount = parseFloat(ctx.message.text);
      if (isNaN(amount) || amount <= 0) {
        await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É SOL (—á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0)');
        return;
      }

      // Handle balance check separately from distribution
      if (userState.distributionType === 'checkBalance') {
        try {
          const loadingMsg = await ctx.reply('‚è≥ –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–ª–∞–Ω—Å—ã –∫–æ—à–µ–ª—å–∫–æ–≤...');
          await transactionService.loadWalletsFromSet();

          let message = 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–ª–∞–Ω—Å–∞:\n\n';
          let totalFound = 0;
          let walletsWithBalance = 0;

          // Check dev wallet (0)
          const devBalance = await transactionService.getWalletBalance(0);
          if (devBalance >= amount) {
            message += `‚úÖ Dev –∫–æ—à–µ–ª–µ–∫ (#0): ${devBalance.toFixed(4)} SOL\n`;
            totalFound += devBalance;
            walletsWithBalance++;
          }

          // Check bundle wallets (1-23)
          for (let i = 1; i <= 23; i++) {
            const balance = await transactionService.getWalletBalance(i);
            if (balance >= amount) {
              message += `‚úÖ Bundle –∫–æ—à–µ–ª–µ–∫ #${i}: ${balance.toFixed(4)} SOL\n`;
              totalFound += balance;
              walletsWithBalance++;
            }
          }

          // Add summary
          message += `\nüìà –ò—Ç–æ–≥–æ:\n`;
          message += `‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –∫–æ—à–µ–ª—å–∫–æ–≤: ${walletsWithBalance}\n`;
          message += `‚Ä¢ –û–±—â–∏–π –±–∞–ª–∞–Ω—Å: ${totalFound.toFixed(4)} SOL\n`;
          message += `‚Ä¢ –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${amount} SOL`;

          await ctx.telegram.editMessageText(
            loadingMsg.chat.id,
            loadingMsg.message_id,
            undefined,
            message
          );

          // Clear user state
          userStates.delete(userId);
          return;
        } catch (error) {
          console.error('Error checking balances:', error);
          await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –±–∞–ª–∞–Ω—Å–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
          return;
        }
      }

      let message = await ctx.reply('‚è≥ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SOL...');
      const progressCallback = async (text: string) => {
        try {
          await ctx.telegram.editMessageText(
            message.chat.id,
            message.message_id,
            undefined,
            text
          );
        } catch (error) {
          console.error('Error updating progress message:', error);
        }
      };

      try {
        // Ensure wallets are loaded from the most recent set
        await transactionService.loadWalletsFromSet();
        
        let signatures: string[];
        if (userState.distributionType === 'bundle') {
          signatures = await transactionService.distributeToBundle(amount, progressCallback);
        } else if (userState.distributionType === 'marketMakers') {
          signatures = await transactionService.distributeToMarketMakers(
            amount,
            userState.useLookupTable ?? false,
            progressCallback
          );
        } else {
          throw new Error('Invalid distribution type');
        }

        // Clear user state
        userStates.delete(userId);

        // Send success message with transaction links
        let resultMessage = '‚úÖ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ SOL –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n\n';
        resultMessage += '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n';
        signatures.forEach((sig, index) => {
          resultMessage += `${index + 1}. https://solscan.io/tx/${sig}\n`;
        });

        await ctx.reply(resultMessage);
      } catch (error) {
        console.error('Error distributing SOL:', error);
        await ctx.reply(
          '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–∏ SOL:\n' +
          (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
        );
      }
    }
  } catch (error) {
    console.error('Error in text message handler:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.');
    userStates.delete(userId);
  }
});

// Check balance command
bot.command('check_balance', async (ctx) => {
  const userId = ctx.from?.id;
  if (!userId) return;

  userStates.set(userId.toString(), {
    waitingForAmount: true,
    distributionType: 'checkBalance',
    tokenData: createEmptyTokenData()
  });

  await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏:');
});

// Test command to verify bot is responding
bot.command('test', async (ctx) => {
  console.log('Received test command from:', ctx.from?.username);
  try {
    await ctx.reply('‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç.');
  } catch (error) {
    console.error('Error in test command:', error);
  }
});

// Handle photo messages for token creation
bot.on('photo', async (ctx) => {
  const userId = ctx.from?.id.toString();
  if (!userId) return;

  const userState = userStates.get(userId);
  if (!userState?.step || userState.step !== 'picture') {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞');
    return;
  }

  if (!userState.tokenData) {
    userState.tokenData = createEmptyTokenData();
  }

  try {
    const photos = ctx.message.photo;
    const fileId = photos[photos.length - 1].file_id;
    const file = await ctx.telegram.getFile(fileId);
    
    if (!file.file_path) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É');
    }

    const imageBuffer = await downloadImage(file.file_path);
    // Process image but don't enforce strict size limits
    const processedImage = await processImage(imageBuffer);
    
    userState.tokenData.picture = processedImage;
    
    await ctx.reply(
      generateTokenSummary(userState.tokenData),
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirm_launch' },
              { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_launch' }
            ]
          ]
        },
        parse_mode: 'HTML'
      }
    );
  } catch (error) {
    console.error('Error processing photo:', error);
    await ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n' +
      (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    );
  }
});

// Handle document messages for token creation
bot.on('document', async (ctx) => {
  const userId = ctx.from?.id.toString();
  if (!userId) return;

  const userState = userStates.get(userId);
  if (!userState?.step || userState.step !== 'picture') {
    await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ —Å–∏–º–≤–æ–ª —Ç–æ–∫–µ–Ω–∞');
    return;
  }

  if (!userState.tokenData) {
    userState.tokenData = createEmptyTokenData();
  }

  try {
    const doc = ctx.message.document;
    if (!doc.mime_type || !['image/jpeg', 'image/png'].includes(doc.mime_type)) {
      await ctx.reply('‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JPG –∏–ª–∏ PNG');
      return;
    }

    const file = await ctx.telegram.getFile(doc.file_id);
    if (!file.file_path) {
      throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É');
    }

    const imageBuffer = await downloadImage(file.file_path);
    // Process image but don't enforce strict size limits
    const processedImage = await processImage(imageBuffer);
    
    userState.tokenData.picture = processedImage;
    
    await ctx.reply(
      generateTokenSummary(userState.tokenData),
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirm_launch' },
              { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_launch' }
            ]
          ]
        },
        parse_mode: 'HTML'
      }
    );
  } catch (error) {
    console.error('Error processing document:', error);
    await ctx.reply(
      '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è:\n' +
      (error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞')
    );
  }
});

// Helper function to generate token summary
function generateTokenSummary(tokenData: TokenData): string {
  return 'üìù <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞:</b>\n\n' +
         `<b>–ù–∞–∑–≤–∞–Ω–∏–µ:</b> ${tokenData.name || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
         `<b>–°–∏–º–≤–æ–ª:</b> ${tokenData.symbol || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
         `<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> ${tokenData.description || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n` +
         `<b>Twitter:</b> ${tokenData.twitter || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
         `<b>Telegram:</b> ${tokenData.telegram || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
         `<b>–í–µ–±-—Å–∞–π—Ç:</b> ${tokenData.website || '–ù–µ —É–∫–∞–∑–∞–Ω'}\n` +
         `<b>–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ:</b> ${tokenData.picture ? '‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ' : '‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n\n` +
         '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞:';
}

// Helper function to download image from URL
async function downloadImage(filePath: string): Promise<Buffer> {
  const fileUrl = `https://api.telegram.org/file/bot${process.env.BOT_TOKEN}/${filePath}`;
  const response = await fetch(fileUrl);
  return response.buffer();
}

// Helper function to resize and optimize image for IPFS
async function processImage(imageBuffer: Buffer): Promise<Buffer> {
  try {
    // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è IPFS
    // - –£–º–µ–Ω—å—à–∞–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ 256x256
    // - –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ PNG —Å –≤—ã—Å–æ–∫–∏–º —Å–∂–∞—Ç–∏–µ–º
    // - –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
    const processedImage = await sharp(imageBuffer)
      .resize(256, 256, {
        fit: 'contain',
        background: { r: 255, g: 255, b: 255, alpha: 1 }
      })
      .png({
        compressionLevel: 9,
        quality: 80,
        palette: true // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–∞–ª–∏—Ç—Ä—É –¥–ª—è —É–º–µ–Ω—å—à–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞
      })
      .toBuffer();

    const sizeKB = processedImage.length / 1024;
    console.log(`Processed image size: ${sizeKB.toFixed(2)} KB`);
    
    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ –µ—â–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ, —É–º–µ–Ω—å—à–∞–µ–º –µ–≥–æ –µ—â–µ —Å–∏–ª—å–Ω–µ–µ
    if (sizeKB > 100) {
      console.log('Image is too large, reducing quality further');
      return await sharp(processedImage)
        .resize(128, 128)
        .png({
          compressionLevel: 9,
          quality: 60,
          palette: true,
          colors: 64 // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ü–≤–µ—Ç–æ–≤
        })
        .toBuffer();
    }
    
    return processedImage;
  } catch (error) {
    console.error('Error processing image:', error);
    throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.');
  }
}

// Helper function to convert image buffer to base64 data URI
function imageBufferToDataUri(buffer: Buffer): string {
  const base64 = buffer.toString('base64');
  console.log('Base64 image length:', base64.length);
  return `data:image/png;base64,${base64}`;
}

// Handle launch confirmation
bot.action('confirm_launch', async (ctx) => {
  const userId = ctx.from?.id.toString();
  if (!userId) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  const userState = userStates.get(userId);
  if (!userState?.tokenData) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }

  const { tokenData } = userState;

  // Validate required fields
  if (!tokenData.name || !tokenData.symbol || !tokenData.description || tokenData.walletNumber === undefined) {
    await ctx.reply(
      '‚ùå –ù–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!\n' +
      '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–Ω–æ–≤–æ —Å –∫–æ–º–∞–Ω–¥—ã /launch'
    );
    return;
  }

  try {
    const message = await ctx.reply('üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞...\n\n–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.');

    try {
      console.log('Starting token creation with user data:', {
        name: tokenData.name,
        symbol: tokenData.symbol,
        description: tokenData.description,
        hasPicture: !!tokenData.picture,
        walletNumber: tokenData.walletNumber
      });
      
      // Use PumpFunService with wallet selection
      const result = await pumpFunService.createTokenWithSteps(
        {
          name: tokenData.name,
          symbol: tokenData.symbol,
          description: tokenData.description,
          image: tokenData.picture || Buffer.alloc(0),
          twitter: tokenData.twitter,
          telegram: tokenData.telegram,
          website: tokenData.website,
          walletNumber: tokenData.walletNumber
        }
      );

      console.log('Token creation successful:', result);
      
      // Save token information
      await tokenHistoryService.addToken(parseInt(userId), result);

      // Format result message
      let resultMessage = '‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!\n\n';
      resultMessage += `Mint Address: ${result.mintAddress}\n`;
      resultMessage += `Transaction: https://solscan.io/tx/${result.signature}\n`;
      resultMessage += `–°–æ–∑–¥–∞–Ω —Å –∫–æ—à–µ–ª—å–∫–∞ #${tokenData.walletNumber}\n\n`;
      
      if (!result.signatureValid) {
        resultMessage += '‚ö†Ô∏è –°–∏–≥–Ω–∞—Ç—É—Ä–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –≤–∞–ª–∏–¥–Ω–∞.\n';
      }
      
      if (result.exists) {
        resultMessage += '‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ.\n';
      } else {
        resultMessage += '‚ö†Ô∏è –¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω, –Ω–æ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω –≤ –±–ª–æ–∫—á–µ–π–Ω–µ. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.\n';
      }
      
      resultMessage += '\n–¢–æ–∫–µ–Ω —Å–æ–∑–¥–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ Pump.fun.\n\n';
      resultMessage += '–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ü–µ–Ω—Ç –±–∞–ª–∞–Ω—Å–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –Ω–∞ –∫–∞–∂–¥–æ–º –∫–æ—à–µ–ª—å–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 5):';

      await ctx.telegram.editMessageText(
        message.chat.id,
        message.message_id,
        undefined,
        resultMessage
      );

      // Update user state for bundle buying
      userStates.set(userId, {
        distributionType: 'bundleBuy',
        step: 'retention',
        bundleData: {
          retentionPercent: 0,
          totalSol: 0,
          transactions: [],
          mintAddress: result.mintAddress
        }
      });

    } catch (error) {
      console.error('Error in token creation:', error);
      let errorMessage = '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞:\n';
      
      if (error instanceof Error) {
        errorMessage += error.message;
      } else {
        errorMessage += '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
      }
      
      await ctx.reply(errorMessage);
    }
  } catch (error) {
    console.error('Error in token creation process:', error);
    await ctx.reply('‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

// Handle launch cancellation
bot.action('cancel_launch', async (ctx) => {
  const userId = ctx.from?.id.toString();
  if (!userId) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  userStates.delete(userId);
  await ctx.reply('‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ');
});

// Handle confirm without image button
bot.action('confirm_without_image', async (ctx) => {
  const userId = ctx.from?.id.toString();
  if (!userId) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  const userState = userStates.get(userId);
  if (!userState?.tokenData) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ —Ç–æ–∫–µ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }

  // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —à–∞–≥ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
  await ctx.reply(
    generateTokenSummary(userState.tokenData),
    {
      reply_markup: {
        inline_keyboard: [
          [
            { text: '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', callback_data: 'confirm_launch' },
            { text: '‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data: 'cancel_launch' }
          ]
        ]
      },
      parse_mode: 'HTML'
    }
  );
});

// Help command
bot.command('help', async (ctx) => {
  let helpMessage = 'üìö –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n';
  
  helpMessage += 'üè¶ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ—à–µ–ª—å–∫–∞–º–∏:\n';
  helpMessage += '/create_wallets - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–µ –∫–æ—à–µ–ª—å–∫–∏\n';
  helpMessage += '/distribute_bundle - –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å SOL –Ω–∞ bundle –∫–æ—à–µ–ª—å–∫–∏\n';
  helpMessage += '/distribute_market - –†–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å SOL –Ω–∞ market making –∫–æ—à–µ–ª—å–∫–∏\n';
  helpMessage += '/check_balance - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞\n';
  helpMessage += '/dev_wallet - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ dev –∫–æ—à–µ–ª—å–∫–µ\n';
  helpMessage += '/wallet_sets - –°–ø–∏—Å–æ–∫ –Ω–∞–±–æ—Ä–æ–≤ –∫–æ—à–µ–ª—å–∫–æ–≤\n\n';
  
  helpMessage += 'ü™ô –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞–º–∏:\n';
  helpMessage += '/launch - –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω\n';
  helpMessage += '/mytokens - –°–ø–∏—Å–æ–∫ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–æ–∫–µ–Ω–æ–≤\n';
  helpMessage += '/buytoken - –ö—É–ø–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ç–æ–∫–µ–Ω –Ω–∞ Pump.fun\n\n';
  
  helpMessage += '‚ùì –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥–µ, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help <–∫–æ–º–∞–Ω–¥–∞>\n';
  helpMessage += '–ù–∞–ø—Ä–∏–º–µ—Ä: /help buytoken';
  
  await ctx.reply(helpMessage);
});

// Handle bundle confirmation
bot.action('confirm_bundle', async (ctx) => {
  const userId = ctx.from?.id.toString();
  if (!userId) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    return;
  }

  const userState = userStates.get(userId);
  if (!userState?.bundleData) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –¥–ª—è bundle –ø–æ–∫—É–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
    return;
  }

  const { mintAddress, transactions } = userState.bundleData;
  if (!mintAddress || !transactions.length) {
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞: –Ω–µ–ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è bundle –ø–æ–∫—É–ø–∫–∏');
    return;
  }

  const loadingMsg = await ctx.reply('‚è≥ –í—ã–ø–æ–ª–Ω—è–µ–º bundle –ø–æ–∫—É–ø–∫–∏...');
  let successCount = 0;
  let failCount = 0;

  try {
    for (const tx of transactions) {
      try {
        const wallet = await walletService.getWallet(tx.walletNumber);
        if (!wallet) {
          throw new Error(`–ö–æ—à–µ–ª–µ–∫ #${tx.walletNumber} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
        }

        const signature = await pumpFunService.buyTokens(
          new PublicKey(mintAddress),
          tx.amount,
          1, // –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤
          wallet
        );

        tx.signature = signature;
        successCount++;

        // Update progress
        await ctx.telegram.editMessageText(
          loadingMsg.chat.id,
          loadingMsg.message_id,
          undefined,
          `‚è≥ –í—ã–ø–æ–ª–Ω–µ–Ω–æ ${successCount} –∏–∑ ${transactions.length} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π...`
        );
      } catch (error) {
        console.error(`Error in transaction for wallet #${tx.walletNumber}:`, error);
        failCount++;
      }
    }

    // Final summary
    let summary = 'üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã bundle –ø–æ–∫—É–ø–∫–∏:\n\n';
    summary += `‚úÖ –£—Å–ø–µ—à–Ω–æ: ${successCount}\n`;
    summary += `‚ùå –ù–µ—É–¥–∞—á–Ω–æ: ${failCount}\n\n`;
    summary += `üîó –¢–æ–∫–µ–Ω: https://pump.fun/token/${mintAddress}\n\n`;
    summary += '–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:\n';
    transactions.forEach(tx => {
      if (tx.signature) {
        summary += `–ö–æ—à–µ–ª–µ–∫ #${tx.walletNumber}: https://solscan.io/tx/${tx.signature}\n`;
      }
    });

    await ctx.telegram.editMessageText(
      loadingMsg.chat.id,
      loadingMsg.message_id,
      undefined,
      summary
    );

    // Clear user state
    userStates.delete(userId);
  } catch (error) {
    console.error('Error in bundle execution:', error);
    await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ bundle –ø–æ–∫—É–ø–æ–∫');
  }
});

bot.action('cancel_bundle', async (ctx) => {
  const userId = ctx.from?.id.toString();
  if (userId) {
    userStates.delete(userId);
  }
  await ctx.reply('‚ùå Bundle –ø–æ–∫—É–ø–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞');
});

// Launch bot
bot.launch().then(async () => {
  console.log('Bot started successfully!');
  console.log('Bot username:', bot.botInfo?.username);
  
  // Initialize dev wallet on startup
  try {
    const wallet = await initDevWallet();
    console.log('Dev wallet initialized:', wallet.publicKey);
    
    // Initialize transaction service with dev wallet
    const balance = await transactionService.getDevWalletBalance(wallet.publicKey);
    console.log('Dev wallet balance:', balance.toFixed(4), 'SOL');

    // Start accepting commands
    console.log('Bot ready to accept commands...');
  } catch (error) {
    console.error('Failed to initialize dev wallet:', error);
    throw new Error('Bot initialization failed: Dev wallet could not be initialized');
  }
}).catch((error) => {
  console.error('Error starting bot:', error);
  process.exit(1); // Exit if initialization fails
});

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));

// Add middleware to ensure dev wallet is initialized before handling commands
bot.use(async (ctx, next) => {
  try {
    console.log('Checking dev wallet in middleware...');
    const devWallet = walletService.getDevWallet();
    if (!devWallet) {
      console.log('Dev wallet not found in middleware, attempting to initialize...');
      await initDevWallet();
    }
    console.log('Dev wallet check completed, proceeding with command...');
    return next();
  } catch (error) {
    console.error('Error in wallet middleware:', error);
    if (ctx.message) {
      await ctx.reply('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∫–æ—à–µ–ª—å–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
    }
    // Still proceed with next middleware even if there's an error
    return next();
  }
});