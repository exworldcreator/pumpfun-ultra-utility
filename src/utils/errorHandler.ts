import { Context } from 'telegraf';
import * as fs from 'fs';
import * as path from 'path';

// –¢–∏–ø—ã –æ—à–∏–±–æ–∫
export enum ErrorType {
  RPC_ERROR = 'RPC_ERROR',
  INSUFFICIENT_BALANCE = 'INSUFFICIENT_BALANCE',
  TRANSACTION_ERROR = 'TRANSACTION_ERROR',
  WALLET_ERROR = 'WALLET_ERROR',
  TOKEN_ERROR = 'TOKEN_ERROR',
  NETWORK_ERROR = 'NETWORK_ERROR',
  UNKNOWN_ERROR = 'UNKNOWN_ERROR'
}

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –æ—à–∏–±–∫–∏
export interface StructuredError {
  type: ErrorType;
  message: string;
  details?: string;
  timestamp: Date;
  userId?: string;
  actionType?: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
export function determineErrorType(error: any): ErrorType {
  const errorMessage = error instanceof Error ? error.message : String(error);
  
  if (errorMessage.includes('429') || errorMessage.includes('Too Many Requests') || 
      errorMessage.includes('rate limit') || errorMessage.includes('timeout')) {
    return ErrorType.RPC_ERROR;
  }
  
  if (errorMessage.includes('insufficient') || errorMessage.includes('Insufficient') || 
      errorMessage.includes('balance') || errorMessage.includes('0.001')) {
    return ErrorType.INSUFFICIENT_BALANCE;
  }
  
  if (errorMessage.includes('transaction') || errorMessage.includes('Transaction') || 
      errorMessage.includes('signature') || errorMessage.includes('blockhash')) {
    return ErrorType.TRANSACTION_ERROR;
  }
  
  if (errorMessage.includes('wallet') || errorMessage.includes('Wallet') || 
      errorMessage.includes('keypair') || errorMessage.includes('private key')) {
    return ErrorType.WALLET_ERROR;
  }
  
  if (errorMessage.includes('token') || errorMessage.includes('Token') || 
      errorMessage.includes('mint') || errorMessage.includes('bonding curve')) {
    return ErrorType.TOKEN_ERROR;
  }
  
  if (errorMessage.includes('network') || errorMessage.includes('connection') || 
      errorMessage.includes('fetch') || errorMessage.includes('request')) {
    return ErrorType.NETWORK_ERROR;
  }
  
  return ErrorType.UNKNOWN_ERROR;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
export function getUserFriendlyErrorMessage(error: any): string {
  const errorType = determineErrorType(error);
  const errorMessage = error instanceof Error ? error.message : String(error);
  
  switch (errorType) {
    case ErrorType.RPC_ERROR:
      return '‚ùå –û—à–∏–±–∫–∞ RPC: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –±–ª–æ–∫—á–µ–π–Ω—É. –í–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–≤—Ç–æ—Ä–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –ø–æ–∑–∂–µ.';
    
    case ErrorType.INSUFFICIENT_BALANCE:
      return '‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã–π –±–∞–ª–∞–Ω—Å: –ù–∞ –∫–æ—à–µ–ª—å–∫–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ SOL –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø–æ–ª–Ω–∏—Ç–µ –±–∞–ª–∞–Ω—Å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
    
    case ErrorType.TRANSACTION_ERROR:
      return '‚ùå –û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
    
    case ErrorType.WALLET_ERROR:
      return '‚ùå –û—à–∏–±–∫–∞ –∫–æ—à–µ–ª—å–∫–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ –∫–æ—à–µ–ª—å–∫—É –∏–ª–∏ –µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏–µ–º. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
    
    case ErrorType.TOKEN_ERROR:
      return '‚ùå –û—à–∏–±–∫–∞ —Ç–æ–∫–µ–Ω–∞: –ü—Ä–æ–±–ª–µ–º–∞ —Å —Ç–æ–∫–µ–Ω–æ–º –∏–ª–∏ –µ–≥–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∞–¥—Ä–µ—Å —Ç–æ–∫–µ–Ω–∞ –∏ –µ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å.';
    
    case ErrorType.NETWORK_ERROR:
      return '‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: –ü—Ä–æ–±–ª–µ–º–∞ —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ —Å–µ—Ç–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.';
    
    default:
      return `‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞: ${errorMessage}`;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ –≤ —Ñ–∞–π–ª
export function logError(error: StructuredError): void {
  const logDir = path.join(process.cwd(), 'logs');
  const logFile = path.join(logDir, 'errors.log');
  
  // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –ª–æ–≥–æ–≤, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
  if (!fs.existsSync(logDir)) {
    fs.mkdirSync(logDir, { recursive: true });
  }
  
  const logEntry = `[${error.timestamp.toISOString()}] [${error.type}] ${error.message}\n` +
                  `User: ${error.userId || 'Unknown'}\n` +
                  `Action: ${error.actionType || 'Unknown'}\n` +
                  `Details: ${error.details || 'No details'}\n` +
                  `-------------------------------------------\n`;
  
  fs.appendFileSync(logFile, logEntry);
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
export async function handleError(ctx: Context, error: any, actionType?: string): Promise<void> {
  const userId = ctx.from?.id.toString();
  const errorMessage = error instanceof Error ? error.message : String(error);
  const errorType = determineErrorType(error);
  
  // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—É—é –æ—à–∏–±–∫—É
  const structuredError: StructuredError = {
    type: errorType,
    message: errorMessage,
    timestamp: new Date(),
    userId,
    actionType
  };
  
  // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
  logError(structuredError);
  
  // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
  const userMessage = getUserFriendlyErrorMessage(error);
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  try {
    await ctx.reply(userMessage);
    
    // –î–ª—è —Å–µ—Ä—å–µ–∑–Ω—ã—Ö –æ—à–∏–±–æ–∫ –¥–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    if (errorType === ErrorType.UNKNOWN_ERROR) {
      await ctx.reply(
        'üìã –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏:\n' +
        `–¢–∏–ø: ${errorType}\n` +
        `–í—Ä–µ–º—è: ${structuredError.timestamp.toISOString()}\n` +
        `–î–µ–π—Å—Ç–≤–∏–µ: ${actionType || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n` +
        `–û—à–∏–±–∫–∞: ${errorMessage.substring(0, 200)}`
      );
    }
  } catch (replyError) {
    console.error('Failed to send error message to user:', replyError);
  }
} 